{"ast":null,"code":"var _jsxFileName = \"D:\\\\korindo_proj\\\\appfe\\\\src\\\\pages\\\\TestingPage\\\\TestingPage.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport './TestingPage.css'; //Import Breadcrumb\n\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\nimport '../../config';\nimport { Row, Col, Card, CardBody, FormGroup, Button, Label, Input, Container, FormFeedback, Form, Spinner, CardTitle, CardSubtitle, Modal } from \"reactstrap\";\nimport { getData as onGetData, getDataImage as onGetDataImage, resetDonwload } from \"../../store/donwloaddata/actions\"; // Formik validation\n\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\"; //SweetAlert\n\nimport SweetAlert from \"react-bootstrap-sweetalert\"; //redux\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { PhotoshopPicker } from \"react-color\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestingPage = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [custom_div1, setcustom_div1] = useState(false);\n  const [disableButton, setDisableButton] = useState(false);\n  const [visibleSpinner, setVisibleSpinner] = useState(false);\n  const rangeValidation = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      max_L_kdUser: '',\n      max_L_nmUser: '',\n      max_L_poc: 'POC AHM',\n      max_L_file: ''\n    },\n    validationSchema: Yup.object().shape({\n      max_L_kdUser: Yup.string().max(3, \"Must be exactly 3 chars\").required(\"Max 3 chars\"),\n      max_L_nmUser: Yup.string().max(5, \"Must be exactly 5 chars\").required(\"Max 5 chars\"),\n      max_L_file: Yup.string().required(\"File is Required\")\n    }),\n    onSubmit: values => {\n      console.log(\"Proses Submite\");\n      setDisableButton(true);\n      setVisibleSpinner(true);\n      var bodyFormData = new FormData();\n      bodyFormData.append('file', values.max_L_file);\n      bodyFormData.append('poc', values.max_L_poc);\n      bodyFormData.append('userId', values.max_L_kdUser);\n      bodyFormData.append('userNm', values.max_L_nmUser);\n      axios({\n        method: \"post\",\n        url: \"http://localhost:9002/app/\" + \"app001/upload\",\n        data: bodyFormData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(function (response) {\n        //handle success\n        if (response.data.message = 1) {\n          setcustom_div1(true);\n          rangeValidation.setValues({\n            \"max_L_kdUser\": \"\",\n            \"max_L_nmUser\": \"\",\n            max_L_poc: 'POC AHM'\n          });\n          document.getElementById(\"idFileUpload\").value = \"\";\n        }\n\n        setDisableButton(false);\n        setVisibleSpinner(false);\n      }).catch(function (response) {\n        //handle error\n        console.log(response);\n        setDisableButton(false);\n        setVisibleSpinner(false);\n        alert(\"Error Request Data\");\n      });\n    }\n  });\n  const [isSending, setIsSending] = useState(false);\n  const sendRequest = useCallback(async () => {\n    setReq({\n      page: 1,\n      limit: 5,\n      offset: 0,\n      sort: \"id\",\n      order: \"asc\",\n      search: {}\n    }); //dispatch(onGetData(req));\n    //}, [entrydata]) // update the callback if the state changes\n  }, []);\n\n  function Example() {\n    _s();\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => setShow(true);\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Korindo App\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n            title: \"Forms\",\n            breadcrumbItem: \"Testing Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/donwload\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              className: \"btn btn-primary col-sm-1\",\n              children: \"Refresh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            className: \"btn btn-primary col-sm-1 delete-button\",\n            onClick: () => {\n              if (window.confirm('Are you sure want to delete?')) this.onCancel(item);\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            className: \"btn btn-primary col-sm-1\",\n            onClick: handleShow,\n            children: \"Launch demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            show: show,\n            onHide: handleClose,\n            children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n              closeButton: true,\n              children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n                children: \"Modal heading\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n              children: \"Woohoo, youre reading this text in a modal!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: handleClose,\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                onClick: handleClose,\n                children: \"Save Changes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              lg: 12,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                children: /*#__PURE__*/_jsxDEV(CardBody, {\n                  children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n                    children: \"Validation type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 59\n                  }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n                    className: \"mb-3\",\n                    children: \"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server. Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server. Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server. Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server. Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server. Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(Example, \"NKb1ZOdhT+qUsWLXSgjSS2bk2C4=\");\n\n  render( /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 10\n  }, this));\n};\n\n_s2(TestingPage, \"qVQoOIfFAo+w9Q1nbpGOepbtqMQ=\", false, function () {\n  return [useFormik];\n});\n\n_c = TestingPage;\nexport default TestingPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestingPage\");","map":{"version":3,"sources":["D:/korindo_proj/appfe/src/pages/TestingPage/TestingPage.js"],"names":["React","useState","useEffect","useCallback","MetaTags","BootstrapTable","paginationFactory","Breadcrumbs","Row","Col","Card","CardBody","FormGroup","Button","Label","Input","Container","FormFeedback","Form","Spinner","CardTitle","CardSubtitle","Modal","getData","onGetData","getDataImage","onGetDataImage","resetDonwload","Yup","useFormik","SweetAlert","useSelector","useDispatch","PhotoshopPicker","Link","TestingPage","custom_div1","setcustom_div1","disableButton","setDisableButton","visibleSpinner","setVisibleSpinner","rangeValidation","enableReinitialize","initialValues","max_L_kdUser","max_L_nmUser","max_L_poc","max_L_file","validationSchema","object","shape","string","max","required","onSubmit","values","console","log","bodyFormData","FormData","append","axios","method","url","data","headers","then","response","message","setValues","document","getElementById","value","catch","alert","isSending","setIsSending","sendRequest","setReq","page","limit","offset","sort","order","search","Example","show","setShow","handleClose","handleShow","window","confirm","onCancel","item","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport './TestingPage.css';\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\nimport '../../config';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Button,\r\n  Label,\r\n  Input,\r\n  Container,\r\n  FormFeedback,\r\n  Form,\r\n  Spinner,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Modal\r\n} from \"reactstrap\";\r\n\r\nimport { getData as onGetData, getDataImage as onGetDataImage, resetDonwload } from \"../../store/donwloaddata/actions\"\r\n\r\n// Formik validation\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\n//SweetAlert\r\nimport SweetAlert from \"react-bootstrap-sweetalert\"\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { PhotoshopPicker } from \"react-color\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TestingPage = () => {\r\n\r\n  const [custom_div1, setcustom_div1] = useState(false)\r\n  const [disableButton, setDisableButton] = useState(false);\r\n  const [visibleSpinner, setVisibleSpinner] = useState(false);\r\n\r\n  const rangeValidation = useFormik({\r\n    enableReinitialize: true,\r\n\r\n    initialValues: {\r\n      max_L_kdUser: '',\r\n      max_L_nmUser: '',\r\n      max_L_poc: 'POC AHM',\r\n      max_L_file: '',\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      max_L_kdUser: Yup.string()\r\n        .max(3, \"Must be exactly 3 chars\")\r\n        .required(\"Max 3 chars\"),\r\n      max_L_nmUser: Yup.string()\r\n        .max(5, \"Must be exactly 5 chars\")\r\n        .required(\"Max 5 chars\"),\r\n      max_L_file: Yup.string()\r\n        .required(\"File is Required\"),\r\n    }),\r\n\r\n\r\n    onSubmit: (values) => {\r\n      console.log(\"Proses Submite\");\r\n      setDisableButton(true);\r\n      setVisibleSpinner(true);\r\n      var bodyFormData = new FormData();\r\n      bodyFormData.append('file', values.max_L_file);\r\n      bodyFormData.append('poc', values.max_L_poc);\r\n      bodyFormData.append('userId', values.max_L_kdUser);\r\n      bodyFormData.append('userNm', values.max_L_nmUser);\r\n      axios({\r\n        method: \"post\",\r\n        url: \"http://localhost:9002/app/\" + \"app001/upload\",\r\n        data: bodyFormData,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      })\r\n        .then(function (response) {\r\n          //handle success\r\n          if (response.data.message = 1) {\r\n            setcustom_div1(true);\r\n            rangeValidation.setValues({ \"max_L_kdUser\": \"\", \"max_L_nmUser\": \"\", max_L_poc: 'POC AHM' });\r\n            document.getElementById(\"idFileUpload\").value = \"\";\r\n          }\r\n          setDisableButton(false);\r\n          setVisibleSpinner(false);\r\n        })\r\n        .catch(function (response) {\r\n          //handle error\r\n          console.log(response);\r\n          setDisableButton(false);\r\n          setVisibleSpinner(false);\r\n          alert(\"Error Request Data\");\r\n\r\n        });\r\n    }\r\n  });\r\n\r\n  const [isSending, setIsSending] = useState(false)\r\n  const sendRequest = useCallback(async () => {\r\n    setReq({ page: 1, limit: 5, offset: 0, sort: \"id\", order: \"asc\", search: {} });\r\n    //dispatch(onGetData(req));\r\n    //}, [entrydata]) // update the callback if the state changes\r\n  }, [])\r\n\r\n  function Example() {\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\">\r\n          <MetaTags>\r\n            <title>\r\n              Korindo App\r\n            </title>\r\n          </MetaTags>\r\n          <Container fluid={true}>\r\n            <Breadcrumbs title=\"Forms\" breadcrumbItem=\"Testing Page\" />\r\n            <Link to=\"/donwload\">\r\n              <Button color=\"primary\" className=\"btn btn-primary col-sm-1\">\r\n                Refresh\r\n              </Button>\r\n            </Link>\r\n            <Button color=\"primary\" className=\"btn btn-primary col-sm-1 delete-button\"\r\n              onClick={() => { if (window.confirm('Are you sure want to delete?')) this.onCancel(item) }}>\r\n              Delete\r\n            </Button>\r\n\r\n            <Button variant=\"primary\" className=\"btn btn-primary col-sm-1\" onClick={handleShow}>\r\n              Launch demo\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Modal heading</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>Woohoo, youre reading this text in a modal!</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                  Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleClose}>\r\n                  Save Changes\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n            <br />\r\n            <br />\r\n\r\n            <Row>\r\n              <Col lg={12}>\r\n                <Card>\r\n                  <CardBody>\r\n                    <CardTitle>Validation type</CardTitle><br></br>\r\n                    <CardSubtitle className=\"mb-3\">\r\n                      Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server. Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server. Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server. Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server. Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server. Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server.\r\n                    </CardSubtitle>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n\r\n          </Container>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  render(<Example />);\r\n\r\n};\r\n\r\nexport default TestingPage"]},"metadata":{},"sourceType":"module"}