{"ast":null,"code":"/* import { call, put, takeEvery, all, takeLatest, fork } from \"redux-saga/effects\"\r\n\r\n// Crypto Redux States\r\n// import { GET_DATA_SUCCESS } from \"./actionTypes\"\r\n// import { getDataSuccess, getDataFail } from \"./actions\"\r\n// import { uploadData } from \"helpers/backend_helper\";\r\n\r\n// Include Both Helper File with needed methods\r\n// import { getData, getDataImage} from \"helpers/backend_helper\"\r\n\r\nfunction* fetchUploadData({ payload: req }) {\r\n  try {\r\n    console.log(\"CALL API : \");\r\n    const response = yield call(uploadData, req)\r\n    if(response.status == 1){\r\n      yield put(getDataSuccess(response))\r\n    }else{\r\n      yield put(getDataFail(\"Error Get Data\"))\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(getDataFail(\"Error Get Data\"))\r\n  }\r\n}\r\n\r\nfunction* getDataSaga() {\r\n  yield takeEvery(GET_DATA_SUCCESS, fetchUploadData)\r\n}\r\n\r\nfunction* downloadSaga() {\r\n  console.log('CALL SAGA RESET');\r\n  yield all([fork(getDataSaga)])\r\n}\r\n\r\nexport default getDataSaga\r\n */\nimport { all, put, call, takeEvery } from \"redux-saga/effects\";\nimport * as actionType from \"./actionTypes\";\nexport default function* addPostSaga() {\n  yield takeEvery(actionType.ADD_POST, addPost);\n}\n\nfunction* addPost(action) {\n  console.log(action);\n\n  try {\n    const postResponse = yield call(postsblogPostApi.add, action.payload);\n    yield put({\n      type: actionType.ADDED_POST,\n      payload: postResponse\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}","map":{"version":3,"sources":["D:/korindo_proj/appfe/src/store/entrydata/saga.js"],"names":["all","put","call","takeEvery","actionType","addPostSaga","ADD_POST","addPost","action","console","log","postResponse","postsblogPostApi","add","payload","type","ADDED_POST","err"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,OAAO,KAAKC,UAAZ,MAA4B,eAA5B;AAEA,eAAe,UAAUC,WAAV,GAAwB;AACnC,QAAMF,SAAS,CAACC,UAAU,CAACE,QAAZ,EAAsBC,OAAtB,CAAf;AACH;;AAED,UAAUA,OAAV,CAAkBC,MAAlB,EAA0B;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,MAAI;AACA,UAAMG,YAAY,GAAG,MAAMT,IAAI,CAACU,gBAAgB,CAACC,GAAlB,EAAuBL,MAAM,CAACM,OAA9B,CAA/B;AACA,UAAMb,GAAG,CAAC;AAAEc,MAAAA,IAAI,EAAEX,UAAU,CAACY,UAAnB;AAA+BF,MAAAA,OAAO,EAAEH;AAAxC,KAAD,CAAT;AACH,GAHD,CAGE,OAAOM,GAAP,EAAY;AACVR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACH;AACJ","sourcesContent":["/* import { call, put, takeEvery, all, takeLatest, fork } from \"redux-saga/effects\"\r\n\r\n// Crypto Redux States\r\n// import { GET_DATA_SUCCESS } from \"./actionTypes\"\r\n// import { getDataSuccess, getDataFail } from \"./actions\"\r\n// import { uploadData } from \"helpers/backend_helper\";\r\n\r\n// Include Both Helper File with needed methods\r\n// import { getData, getDataImage} from \"helpers/backend_helper\"\r\n\r\nfunction* fetchUploadData({ payload: req }) {\r\n  try {\r\n    console.log(\"CALL API : \");\r\n    const response = yield call(uploadData, req)\r\n    if(response.status == 1){\r\n      yield put(getDataSuccess(response))\r\n    }else{\r\n      yield put(getDataFail(\"Error Get Data\"))\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(getDataFail(\"Error Get Data\"))\r\n  }\r\n}\r\n\r\nfunction* getDataSaga() {\r\n  yield takeEvery(GET_DATA_SUCCESS, fetchUploadData)\r\n}\r\n\r\nfunction* downloadSaga() {\r\n  console.log('CALL SAGA RESET');\r\n  yield all([fork(getDataSaga)])\r\n}\r\n\r\nexport default getDataSaga\r\n */\r\n\r\nimport { all, put, call, takeEvery } from \"redux-saga/effects\";\r\nimport * as actionType from \"./actionTypes\";\r\n\r\nexport default function* addPostSaga() {\r\n    yield takeEvery(actionType.ADD_POST, addPost);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    console.log(action)\r\n    try {\r\n        const postResponse = yield call(postsblogPostApi.add, action.payload);\r\n        yield put({ type: actionType.ADDED_POST, payload: postResponse });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}