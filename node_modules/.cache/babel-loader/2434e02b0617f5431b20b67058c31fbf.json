{"ast":null,"code":"import { GET_WALLET_FAIL, GET_WALLET_SUCCESS, GET_CRYPTO_ORDERS_SUCCESS, GET_CRYPTO_ORDERS_FAIL } from \"./actionTypes\";\nconst INIT_STATE = {\n  wallet: {},\n  orders: []\n};\n\nconst Crypto = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_WALLET_SUCCESS:\n      return { ...state,\n        wallet: action.payload\n      };\n\n    case GET_WALLET_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    case GET_CRYPTO_ORDERS_SUCCESS:\n      return { ...state,\n        orders: action.payload\n      };\n\n    case GET_CRYPTO_ORDERS_FAIL:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Crypto;\nexport default Crypto;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crypto\");","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/store/crypto/reducer.js"],"names":["GET_WALLET_FAIL","GET_WALLET_SUCCESS","GET_CRYPTO_ORDERS_SUCCESS","GET_CRYPTO_ORDERS_FAIL","INIT_STATE","wallet","orders","Crypto","state","action","type","payload","error"],"mappings":"AAAA,SACEA,eADF,EAEEC,kBAFF,EAGEC,yBAHF,EAIEC,sBAJF,QAKO,eALP;AAOA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAAnB;;AAKA,MAAMC,MAAM,GAAG,YAAgC;AAAA,MAA/BC,KAA+B,uEAAvBJ,UAAuB;AAAA,MAAXK,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,kBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAFV,OAAP;;AAKF,SAAKX,eAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELI,QAAAA,KAAK,EAAEH,MAAM,CAACE;AAFT,OAAP;;AAKF,SAAKT,yBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAFV,OAAP;;AAKF,SAAKR,sBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELI,QAAAA,KAAK,EAAEH,MAAM,CAACE;AAFT,OAAP;;AAKF;AACE,aAAOH,KAAP;AA1BJ;AA4BD,CA7BD;;KAAMD,M;AA+BN,eAAeA,MAAf","sourcesContent":["import {\n  GET_WALLET_FAIL,\n  GET_WALLET_SUCCESS,\n  GET_CRYPTO_ORDERS_SUCCESS,\n  GET_CRYPTO_ORDERS_FAIL,\n} from \"./actionTypes\"\n\nconst INIT_STATE = {\n  wallet: {},\n  orders: [],\n}\n\nconst Crypto = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_WALLET_SUCCESS:\n      return {\n        ...state,\n        wallet: action.payload,\n      }\n\n    case GET_WALLET_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    case GET_CRYPTO_ORDERS_SUCCESS:\n      return {\n        ...state,\n        orders: action.payload,\n      }\n\n    case GET_CRYPTO_ORDERS_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default Crypto\n"]},"metadata":{},"sourceType":"module"}