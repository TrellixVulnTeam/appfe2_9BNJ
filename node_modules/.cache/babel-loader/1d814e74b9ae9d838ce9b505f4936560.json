{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"; // Login Redux States\n\nimport { LOGIN_USER, LOGOUT_USER, SOCIAL_LOGIN } from \"./actionTypes\";\nimport { apiError, loginSuccess, logoutUserSuccess } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeLogin, postJwtLogin, postSocialLogin } from \"../../../helpers/fakebackend_helper\";\nconst fireBaseBackend = getFirebaseBackend();\n\nfunction* loginUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.loginUser, user.email, user.password);\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, {\n        email: user.email,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, {\n        email: user.email,\n        password: user.password\n      });\n      console.log('TOKEN : ' + JSON.stringify(response));\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    }\n\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser(_ref2) {\n  let {\n    payload: {\n      history\n    }\n  } = _ref2;\n\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push(\"/login\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* socialLogin(_ref3) {\n  let {\n    payload: {\n      data,\n      history,\n      type\n    }\n  } = _ref3;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const fireBaseBackend = getFirebaseBackend();\n      const response = yield call(fireBaseBackend.socialLoginUser, data, type);\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else {\n      const response = yield call(postSocialLogin, data);\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    }\n\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser);\n  yield takeLatest(SOCIAL_LOGIN, socialLogin);\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/store/auth/login/saga.js"],"names":["call","put","takeEvery","takeLatest","LOGIN_USER","LOGOUT_USER","SOCIAL_LOGIN","apiError","loginSuccess","logoutUserSuccess","getFirebaseBackend","postFakeLogin","postJwtLogin","postSocialLogin","fireBaseBackend","loginUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","email","password","localStorage","setItem","JSON","stringify","console","log","push","error","logoutUser","removeItem","logout","socialLogin","data","type","socialLoginUser","authSaga"],"mappings":"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","sourcesContent":["import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"\n\n// Login Redux States\nimport { LOGIN_USER, LOGOUT_USER, SOCIAL_LOGIN } from \"./actionTypes\"\nimport { apiError, loginSuccess, logoutUserSuccess } from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\nimport {\n  postFakeLogin,\n  postJwtLogin,\n  postSocialLogin,\n} from \"../../../helpers/fakebackend_helper\"\n\nconst fireBaseBackend = getFirebaseBackend()\n\nfunction* loginUser({ payload: { user, history } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(\n        fireBaseBackend.loginUser,\n        user.email,\n        user.password\n      )\n      yield put(loginSuccess(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, {\n        email: user.email,\n        password: user.password,\n      })\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, {\n        email: user.email,\n        password: user.password,\n      })\n      console.log('TOKEN : ' +JSON.stringify(response));\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    }\n    history.push(\"/dashboard\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* logoutUser({ payload: { history } }) {\n  try {\n    localStorage.removeItem(\"authUser\")\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout)\n      yield put(logoutUserSuccess(response))\n    }\n    history.push(\"/login\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* socialLogin({ payload: { data, history, type } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const fireBaseBackend = getFirebaseBackend()\n      const response = yield call(\n        fireBaseBackend.socialLoginUser,\n        data,\n        type,\n      )\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    } else {\n      const response = yield call(postSocialLogin, data)\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    }\n    history.push(\"/dashboard\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser)\n  yield takeLatest(SOCIAL_LOGIN, socialLogin)\n  yield takeEvery(LOGOUT_USER, logoutUser)\n}\n\nexport default authSaga\n"]},"metadata":{},"sourceType":"module"}