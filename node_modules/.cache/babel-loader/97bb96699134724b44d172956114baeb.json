{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"; // Login Redux States\n\nimport { LOGIN_USER, LOGOUT_USER, SOCIAL_LOGIN } from \"./actionTypes\";\nimport { apiError, loginSuccess, logoutUserSuccess } from \"./actions\";\n\nfunction* loginUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.loginUser, user.email, user.password);\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, {\n        email: user.email,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      try {\n        if (user.email == \"adminpoc@gmail.com\" && user.password == \"1234\") {\n          localStorage.setItem(\"authUser\", JSON.stringify(\"Wh3OyLBmjv7UcF93VSEU/cztR8aoeEE9bFrzeRkdEe+\")); //yield put(loginSuccess(response))\n\n          history.push(\"/dashboard\");\n        } else {\n          yield put(apiError(\"Username and password are invalid. Please enter correct username and password\"));\n        }\n      } catch (e) {\n        console.log(e.message);\n      } // const response = yield call(postFakeLogin, {\n      //   email: user.email,\n      //   password: user.password,\n      // });\n      // localStorage.setItem(\"authUser\", JSON.stringify(response));\n      // yield put(loginSuccess(response));\n\n    }\n\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser(_ref2) {\n  let {\n    payload: {\n      history\n    }\n  } = _ref2;\n\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push(\"/login\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* socialLogin(_ref3) {\n  let {\n    payload: {\n      data,\n      history,\n      type\n    }\n  } = _ref3;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const fireBaseBackend = getFirebaseBackend();\n      const response = yield call(fireBaseBackend.socialLoginUser, data, type);\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else {\n      const response = yield call(postSocialLogin, data);\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    }\n\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser);\n  yield takeLatest(SOCIAL_LOGIN, socialLogin);\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:/React_Code/korindo_proj/appfe/src/store/auth/login/saga.js"],"names":["call","put","takeEvery","takeLatest","LOGIN_USER","LOGOUT_USER","SOCIAL_LOGIN","apiError","loginSuccess","logoutUserSuccess","loginUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","fireBaseBackend","email","password","postJwtLogin","localStorage","setItem","JSON","stringify","push","e","console","log","message","error","logoutUser","removeItem","logout","socialLogin","data","type","getFirebaseBackend","socialLoginUser","postSocialLogin","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,YAAlC,QAAsD,eAAtD;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,iBAAjC,QAA0D,WAA1D;;AAEA,UAAUC,SAAV,OAAoD;AAAA,MAAhC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAX,GAAgC;;AAClD,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAQ,GAAG,MAAMjB,IAAI,CACzBkB,eAAe,CAACR,SADS,EAEzBE,IAAI,CAACO,KAFoB,EAGzBP,IAAI,CAACQ,QAHoB,CAA3B;AAMA,YAAMnB,GAAG,CAACO,YAAY,CAACS,QAAD,CAAb,CAAT;AACD,KARD,MAQO,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,KAA1C,EAAiD;AACtD,YAAMC,QAAQ,GAAG,MAAMjB,IAAI,CAACqB,YAAD,EAAe;AACxCF,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAD4B;AAExCC,QAAAA,QAAQ,EAAER,IAAI,CAACQ;AAFyB,OAAf,CAA3B;AAIAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAjC;AACA,YAAMhB,GAAG,CAACO,YAAY,CAACS,QAAD,CAAb,CAAT;AACD,KAPM,MAOA,IAAIH,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,MAA1C,EAAkD;AACvD,UAAI;AACF,YAAGJ,IAAI,CAACO,KAAL,IAAc,oBAAd,IAAsCP,IAAI,CAACQ,QAAL,IAAiB,MAA1D,EAAiE;AAC/DE,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe,6CAAf,CAAjC,EAD+D,CAE/D;;AACAZ,UAAAA,OAAO,CAACa,IAAR,CAAa,YAAb;AACD,SAJD,MAIK;AACH,gBAAMzB,GAAG,CAACM,QAAQ,CAAC,+EAAD,CAAT,CAAT;AACD;AAEF,OATD,CASE,OAAOoB,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD,OAZsD,CAavD;AACA;AACA;AACA;AAEA;AACA;;AACD;;AACDjB,IAAAA,OAAO,CAACa,IAAR,CAAa,YAAb;AACD,GAtCD,CAsCE,OAAOK,KAAP,EAAc;AACd,UAAM9B,GAAG,CAACM,QAAQ,CAACwB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,QAA+C;AAAA,MAA1B;AAAErB,IAAAA,OAAO,EAAE;AAAEE,MAAAA;AAAF;AAAX,GAA0B;;AAC7C,MAAI;AACFS,IAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;;AAEA,QAAInB,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAQ,GAAG,MAAMjB,IAAI,CAACkB,eAAe,CAACgB,MAAjB,CAA3B;AACA,YAAMjC,GAAG,CAACQ,iBAAiB,CAACQ,QAAD,CAAlB,CAAT;AACD;;AACDJ,IAAAA,OAAO,CAACa,IAAR,CAAa,QAAb;AACD,GARD,CAQE,OAAOK,KAAP,EAAc;AACd,UAAM9B,GAAG,CAACM,QAAQ,CAACwB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,UAAUI,WAAV,QAA4D;AAAA,MAAtC;AAAExB,IAAAA,OAAO,EAAE;AAAEyB,MAAAA,IAAF;AAAQvB,MAAAA,OAAR;AAAiBwB,MAAAA;AAAjB;AAAX,GAAsC;;AAC1D,MAAI;AACF,QAAIvB,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAME,eAAe,GAAGoB,kBAAkB,EAA1C;AACA,YAAMrB,QAAQ,GAAG,MAAMjB,IAAI,CACzBkB,eAAe,CAACqB,eADS,EAEzBH,IAFyB,EAGzBC,IAHyB,CAA3B;AAKAf,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAjC;AACA,YAAMhB,GAAG,CAACO,YAAY,CAACS,QAAD,CAAb,CAAT;AACD,KATD,MASO;AACL,YAAMA,QAAQ,GAAG,MAAMjB,IAAI,CAACwC,eAAD,EAAkBJ,IAAlB,CAA3B;AACAd,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAjC;AACA,YAAMhB,GAAG,CAACO,YAAY,CAACS,QAAD,CAAb,CAAT;AACD;;AACDJ,IAAAA,OAAO,CAACa,IAAR,CAAa,YAAb;AACD,GAhBD,CAgBE,OAAOK,KAAP,EAAc;AACd,UAAM9B,GAAG,CAACM,QAAQ,CAACwB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,UAAUU,QAAV,GAAqB;AACnB,QAAMvC,SAAS,CAACE,UAAD,EAAaM,SAAb,CAAf;AACA,QAAMP,UAAU,CAACG,YAAD,EAAe6B,WAAf,CAAhB;AACA,QAAMjC,SAAS,CAACG,WAAD,EAAc2B,UAAd,CAAf;AACD;;AAED,eAAeS,QAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"\n\n// Login Redux States\nimport { LOGIN_USER, LOGOUT_USER, SOCIAL_LOGIN } from \"./actionTypes\"\nimport { apiError, loginSuccess, logoutUserSuccess } from \"./actions\"\n\nfunction* loginUser({ payload: { user, history } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(\n        fireBaseBackend.loginUser,\n        user.email,\n        user.password\n      )\n      \n      yield put(loginSuccess(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, {\n        email: user.email,\n        password: user.password,\n      })\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      try {\n        if(user.email == \"adminpoc@gmail.com\" && user.password == \"1234\"){\n          localStorage.setItem(\"authUser\", JSON.stringify(\"Wh3OyLBmjv7UcF93VSEU/cztR8aoeEE9bFrzeRkdEe+\"))\n          //yield put(loginSuccess(response))\n          history.push(\"/dashboard\")\n        }else{\n          yield put(apiError(\"Username and password are invalid. Please enter correct username and password\"))\n        }\n        \n      } catch (e) {\n        console.log(e.message)\n      }\n      // const response = yield call(postFakeLogin, {\n      //   email: user.email,\n      //   password: user.password,\n      // });\n\n      // localStorage.setItem(\"authUser\", JSON.stringify(response));\n      // yield put(loginSuccess(response));\n    }\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* logoutUser({ payload: { history } }) {\n  try {\n    localStorage.removeItem(\"authUser\")\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout)\n      yield put(logoutUserSuccess(response))\n    }\n    history.push(\"/login\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* socialLogin({ payload: { data, history, type } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const fireBaseBackend = getFirebaseBackend()\n      const response = yield call(\n        fireBaseBackend.socialLoginUser,\n        data,\n        type,\n      )\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    } else {\n      const response = yield call(postSocialLogin, data)\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    }\n    history.push(\"/dashboard\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser)\n  yield takeLatest(SOCIAL_LOGIN, socialLogin)\n  yield takeEvery(LOGOUT_USER, logoutUser)\n}\n\nexport default authSaga\n"]},"metadata":{},"sourceType":"module"}