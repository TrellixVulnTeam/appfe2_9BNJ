{"ast":null,"code":"import axios from \"axios\";\nimport accessToken from \"./jwt-token-access/accessToken\"; //pass new generated access token here\n\nconst token = accessToken; //apply base url for axios\n\nconst API_URL = \"http://localhost:9002/app\";\nconst axiosApi = axios.create({\n  baseURL: API_URL\n});\naxiosApi.defaults.headers.common[\"Authorization\"] = token;\naxiosApi.interceptors.response.use(response => response, error => Promise.reject(error)); //dispatch(getDataImage(indexed_array));\n//console.log(dataImage);\n// axios({\n//   url: \"http://localhost:9002/app/\"+\"app001/get-file-image?\" + $.param(indexed_array), \n//   method: 'GET',\n//   headers : {token : localStorage.getItem('authUser').replace(/^\"(.*)\"$/, '$1')},\n//   responseType: 'blob', // important\n// }).then((response) => {\n//   console.log(response.data);\n//   if(response.data.size != 0){\n//     const url = window.URL.createObjectURL(new Blob([response.data]));\n//     const link = document.createElement('a');\n//     link.href = url;\n//     link.setAttribute('download', indexed_array.file_name);\n//     document.body.appendChild(link);\n//     link.click();\n//   }else{\n//     alert(\"Data Not Found\");\n//   }\n// })\n// export async function getImage(url, data, config = {}) {\n//   return await axiosApi.get(url+$.param(indexed_array), { ...config }).then(response => response.data);\n// } \n\nexport async function get(url, data) {\n  let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return await axiosApi.get(url + $.param(indexed_array), { ...config\n  }).then(response => response.data);\n}\nexport async function post(url, data) {\n  let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return axiosApi.post(url, { ...data\n  }, { ...config\n  }).then(response => response.data);\n}\nexport async function put(url, data) {\n  let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return axiosApi.put(url, { ...data\n  }, { ...config\n  }).then(response => response.data);\n}\nexport async function del(url) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return await axiosApi.delete(url, { ...config\n  }).then(response => response.data);\n}","map":{"version":3,"sources":["D:/React_Code/korindo_proj/appfe/src/helpers/api_helper.js"],"names":["axios","accessToken","token","API_URL","axiosApi","create","baseURL","defaults","headers","common","interceptors","response","use","error","Promise","reject","get","url","data","config","$","param","indexed_array","then","post","put","del","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gCAAxB,C,CAEA;;AACA,MAAMC,KAAK,GAAGD,WAAd,C,CAEA;;AACA,MAAME,OAAO,GAAG,2BAAhB;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEH;AADmB,CAAb,CAAjB;AAIAC,QAAQ,CAACG,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,IAAoDP,KAApD;AAEAE,QAAQ,CAACM,YAAT,CAAsBC,QAAtB,CAA+BC,GAA/B,CACED,QAAQ,IAAIA,QADd,EAEEE,KAAK,IAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAFX,E,CAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;;AAEA,OAAO,eAAeG,GAAf,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA2C;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AAChD,SAAO,MAAMf,QAAQ,CAACY,GAAT,CAAaC,GAAG,GAACG,CAAC,CAACC,KAAF,CAAQC,aAAR,CAAjB,EAAyC,EAAE,GAAGH;AAAL,GAAzC,EAAwDI,IAAxD,CAA6DZ,QAAQ,IAAIA,QAAQ,CAACO,IAAlF,CAAb;AACD;AAED,OAAO,eAAeM,IAAf,CAAoBP,GAApB,EAAyBC,IAAzB,EAA4C;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACjD,SAAOf,QAAQ,CACZoB,IADI,CACCP,GADD,EACM,EAAE,GAAGC;AAAL,GADN,EACmB,EAAE,GAAGC;AAAL,GADnB,EAEJI,IAFI,CAECZ,QAAQ,IAAIA,QAAQ,CAACO,IAFtB,CAAP;AAGD;AAED,OAAO,eAAeO,GAAf,CAAmBR,GAAnB,EAAwBC,IAAxB,EAA2C;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AAChD,SAAOf,QAAQ,CACZqB,GADI,CACAR,GADA,EACK,EAAE,GAAGC;AAAL,GADL,EACkB,EAAE,GAAGC;AAAL,GADlB,EAEJI,IAFI,CAECZ,QAAQ,IAAIA,QAAQ,CAACO,IAFtB,CAAP;AAGD;AAED,OAAO,eAAeQ,GAAf,CAAmBT,GAAnB,EAAqC;AAAA,MAAbE,MAAa,uEAAJ,EAAI;AAC1C,SAAO,MAAMf,QAAQ,CAClBuB,MADU,CACHV,GADG,EACE,EAAE,GAAGE;AAAL,GADF,EAEVI,IAFU,CAELZ,QAAQ,IAAIA,QAAQ,CAACO,IAFhB,CAAb;AAGD","sourcesContent":["import axios from \"axios\";\nimport accessToken from \"./jwt-token-access/accessToken\";\n\n//pass new generated access token here\nconst token = accessToken;\n\n//apply base url for axios\nconst API_URL = \"http://localhost:9002/app\";\n\nconst axiosApi = axios.create({\n  baseURL: API_URL,\n});\n\naxiosApi.defaults.headers.common[\"Authorization\"] = token;\n\naxiosApi.interceptors.response.use(\n  response => response,\n  error => Promise.reject(error)\n);\n\n  //dispatch(getDataImage(indexed_array));\n  //console.log(dataImage);\n  // axios({\n  //   url: \"http://localhost:9002/app/\"+\"app001/get-file-image?\" + $.param(indexed_array), \n  //   method: 'GET',\n  //   headers : {token : localStorage.getItem('authUser').replace(/^\"(.*)\"$/, '$1')},\n  //   responseType: 'blob', // important\n  // }).then((response) => {\n  //   console.log(response.data);\n  //   if(response.data.size != 0){\n  //     const url = window.URL.createObjectURL(new Blob([response.data]));\n  //     const link = document.createElement('a');\n  //     link.href = url;\n  //     link.setAttribute('download', indexed_array.file_name);\n  //     document.body.appendChild(link);\n  //     link.click();\n  //   }else{\n  //     alert(\"Data Not Found\");\n  //   }\n  // })\n\n// export async function getImage(url, data, config = {}) {\n//   return await axiosApi.get(url+$.param(indexed_array), { ...config }).then(response => response.data);\n// } \n\nexport async function get(url, data, config = {}) {\n  return await axiosApi.get(url+$.param(indexed_array), { ...config }).then(response => response.data);\n}\n\nexport async function post(url, data, config = {}) {\n  return axiosApi\n    .post(url, { ...data }, { ...config })\n    .then(response => response.data);\n}\n\nexport async function put(url, data, config = {}) {\n  return axiosApi\n    .put(url, { ...data }, { ...config })\n    .then(response => response.data);\n}\n\nexport async function del(url, config = {}) {\n  return await axiosApi\n    .delete(url, { ...config })\n    .then(response => response.data);\n}\n"]},"metadata":{},"sourceType":"module"}