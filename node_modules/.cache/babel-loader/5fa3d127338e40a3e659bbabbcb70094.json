{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport { calenderDefaultCategories, cartData, chats, comments, contacts, cryptoOrders, customerData, events, groups, invoiceList, messages, orders, productsData, projects, inboxmails, starredmails, importantmails, draftmails, sentmails, trashmails, recentProducts, shops, tasks, userProfile, users as members, wallet, yearData, monthData, weekData, janTopSellingData, decTopSellingData, novTopSellingData, octTopSellingData, janEarningData, decEarningData, novEarningData, octEarningData, productComments } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}, {\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"1234567\",\n  email: \"rivan@korindo.co.id\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios);\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    console.log(user);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([\"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...user[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData]);\n        } else {\n          reject([400, \"Cannot get products\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const product = productsData.find(product => product.id.toString() === params.id.toString());\n          resolve([200, { ...product,\n            recentProducts,\n            comments\n          }]);\n        } else {\n          reject([400, \"Cannot get product detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails]);\n        } else {\n          reject([400, \"Cannot get inboxmails\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail]);\n        } else {\n          reject([400, \"Cannot delete inboxmail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails]);\n        } else {\n          reject([400, \"Cannot get starredmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails]);\n        } else {\n          reject([400, \"Cannot get importantmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails]);\n        } else {\n          reject([400, \"Cannot get trashmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails]);\n        } else {\n          reject([400, \"Cannot get draftmails\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails]);\n        } else {\n          reject([400, \"Cannot get sentmails\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot add user\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data]);\n        } else {\n          reject([400, \"Cannot update user\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user]);\n        } else {\n          reject([400, \"Cannot delete user\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot add project\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data]);\n        } else {\n          reject([400, \"Cannot update project\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project]);\n        } else {\n          reject([400, \"Cannot delete project\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats]);\n        } else {\n          reject([400, \"Cannot get chats\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups]);\n        } else {\n          reject([400, \"Cannot get groups\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts]);\n        } else {\n          reject([400, \"Cannot get contacts\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const filteredMessages = messages.filter(msg => msg.roomId === params.roomId);\n          resolve([200, filteredMessages]);\n        } else {\n          reject([400, \"Cannot get messages\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data]);\n        } else {\n          reject([400, \"Cannot add message\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot add order\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data]);\n        } else {\n          reject([400, \"Cannot update order\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_ORDER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order]);\n        } else {\n          reject([400, \"Cannot delete order\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData]);\n        } else {\n          reject([400, \"Cannot get cart data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData]);\n        } else {\n          reject([400, \"Cannot get customers data\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot add customer\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data]);\n        } else {\n          reject([400, \"Cannot update customer\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_CUSTOMER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer]);\n        } else {\n          reject([400, \"Cannot delete customer\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops]);\n        } else {\n          reject([400, \"Cannot get shops data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders]);\n        } else {\n          reject([400, \"Cannot get orders\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList]);\n        } else {\n          reject([400, \"Cannot get invoices\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const invoice = invoiceList.find(invoice => invoice.id.toString() === params.id.toString());\n          resolve([200, invoice]);\n        } else {\n          reject([400, \"Cannot get invoice\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects]);\n        } else {\n          reject([400, \"Cannot get projects\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          const project = projects.find(project => project.id.toString() === params.id.toString());\n          resolve([200, project]);\n        } else {\n          reject([400, \"Cannot get project detail\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks]);\n        } else {\n          reject([400, \"Cannot get tasks\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members]);\n        } else {\n          reject([400, \"Cannot get users\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile]);\n        } else {\n          reject([400, \"Cannot get user profile\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_WEEKLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (weekData) {\n          // Passing fake JSON data as response\n          resolve([200, weekData]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_YEARLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (yearData) {\n          // Passing fake JSON data as response\n          resolve([200, yearData]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_MONTHLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (monthData) {\n          // Passing fake JSON data as response\n          resolve([200, monthData]);\n        } else {\n          reject([400, \"Cannot get wallet data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        params\n      } = config;\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          var data = [];\n\n          if (params.month === \"jan\") {\n            data = janTopSellingData;\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData;\n          } else if (params.month === \"nov\") {\n            data = novTopSellingData;\n          } else if (params.month === \"oct\") {\n            data = octTopSellingData;\n          }\n\n          resolve([200, data]);\n        } else {\n          reject([400, \"Cannot get selling data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        params\n      } = config;\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const {\n            params\n          } = config;\n          var data = [];\n\n          if (params.month === \"jan\") {\n            data = janEarningData;\n          } else if (params.month === \"dec\") {\n            data = decEarningData;\n          } else if (params.month === \"nov\") {\n            data = novEarningData;\n          } else if (params.month === \"oct\") {\n            data = octEarningData;\n          }\n\n          resolve([200, data]);\n        } else {\n          reject([400, \"Cannot get earning data\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_PRODUCT_COMMENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productComments) {\n          // Passing fake JSON data as response\n          resolve([200, productComments]);\n        } else {\n          reject([400, \"Cannot get comment data\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(new RegExp(`${url.ON_LIKNE_COMMENT}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        data\n      } = config;\n      const {\n        params\n      } = JSON.parse(data);\n      setTimeout(() => {\n        if (productComments) {\n          var modifiedProductComments = [...productComments];\n          const commentIdx = (modifiedProductComments || []).findIndex(comment => comment.commentId.toString() === params.commentId.toString());\n\n          if (commentIdx > -1) {\n            if (params.replyId && modifiedProductComments[commentIdx][\"replies\"]) {\n              const replyIdx = (modifiedProductComments[commentIdx][\"replies\"] || []).findIndex(reply => reply.replyId.toString() === params.replyId.toString());\n\n              if (replyIdx > -1) {\n                if (modifiedProductComments[commentIdx][\"replies\"][replyIdx][\"hasLiked\"]) {\n                  modifiedProductComments[commentIdx][\"replies\"][replyIdx][\"hasLiked\"] = false;\n                } else {\n                  modifiedProductComments[commentIdx][\"replies\"][replyIdx][\"hasLiked\"] = true;\n                }\n              }\n            } else {\n              if (modifiedProductComments[commentIdx][\"hasLiked\"]) {\n                modifiedProductComments[commentIdx][\"hasLiked\"] = false;\n              } else {\n                modifiedProductComments[commentIdx][\"hasLiked\"] = true;\n              }\n            }\n          } // Passing fake JSON data as response\n\n\n          resolve([200, modifiedProductComments]);\n        } else {\n          reject([400, \"Cannot add comment\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(new RegExp(`${url.ON_ADD_REPLY}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        data\n      } = config;\n      const {\n        params\n      } = JSON.parse(data);\n      setTimeout(() => {\n        if (productComments) {\n          const modifiedComments = [...productComments];\n          const commentIdx = (modifiedComments || []).findIndex(comment => comment.commentId.toString() === params.commentId.toString());\n          const today = new Date();\n          const mins = today.getMinutes();\n\n          if (commentIdx > -1) {\n            var newReplyId = 1;\n\n            if (modifiedComments[commentIdx][\"replies\"] && modifiedComments[commentIdx][\"replies\"].length) {\n              const totalReplies = modifiedComments[commentIdx][\"replies\"];\n              newReplyId = totalReplies[totalReplies.length - 1] + 1;\n              const replyObj = {\n                commentId: params.commentId,\n                replyId: newReplyId,\n                user: {\n                  name: \"Admin\",\n                  profile: \"avatar1\"\n                },\n                comment: params.replyText,\n                time: `${mins} mins ago`,\n                hasLiked: false\n              };\n              modifiedComments[commentIdx][\"replies\"].push({ ...replyObj\n              });\n              modifiedComments[commentIdx][\"showAddComment\"] = false;\n            } else {\n              modifiedComments[commentIdx][\"replies\"] = [];\n              const replyObj = {\n                commentId: params.commentId,\n                replyId: newReplyId,\n                user: {\n                  name: \"Admin\",\n                  profile: \"avatar1\"\n                },\n                comment: params.replyText,\n                time: `${mins} mins ago`,\n                hasLiked: false\n              };\n              modifiedComments[commentIdx][\"replies\"].push({ ...replyObj\n              });\n            }\n          } // Passing fake JSON data as response\n\n\n          resolve([200, modifiedComments]);\n        } else {\n          reject([400, \"Cannot add comment\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(new RegExp(`${url.ON_ADD_COMMENT}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const {\n        data\n      } = config;\n      const {\n        params\n      } = JSON.parse(data);\n      setTimeout(() => {\n        if (productComments) {\n          const modifiedComments = [...productComments];\n          const today = new Date();\n          const mins = today.getMinutes();\n          const commentObj = {\n            commentId: modifiedComments.length + 1,\n            user: {\n              name: \"Admin\",\n              profile: \"avatar1\"\n            },\n            comment: params.commentText,\n            time: `${mins} mins ago`,\n            hasLiked: false\n          };\n          modifiedComments.push({ ...commentObj\n          });\n          productComments.push({ ...commentObj\n          }); // Passing fake JSON data as response\n\n          resolve([200, modifiedComments]);\n        } else {\n          reject([400, \"Cannot add comment\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","cartData","chats","comments","contacts","cryptoOrders","customerData","events","groups","invoiceList","messages","orders","productsData","projects","inboxmails","starredmails","importantmails","draftmails","sentmails","trashmails","recentProducts","shops","tasks","userProfile","users","members","wallet","yearData","monthData","weekData","janTopSellingData","decTopSellingData","novTopSellingData","octTopSellingData","janEarningData","decEarningData","novEarningData","octEarningData","productComments","uid","username","role","password","email","fakeBackend","mock","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","console","log","validUser","filter","usr","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","onGet","GET_PRODUCTS","RegExp","GET_PRODUCTS_DETAIL","params","product","find","id","toString","GET_EVENTS","GET_INBOX_MAILS","ADD_NEW_INBOX_MAIL","inboxmail","data","onDelete","DELETE_INBOX_MAIL","GET_STARRED_MAILS","GET_IMPORTANT_MAILS","GET_TRASH_MAILS","GET_DRAFT_MAILS","GET_SENT_MAILS","ADD_NEW_USER","onPut","UPDATE_USER","DELETE_USER","ADD_NEW_PROJECT","project","UPDATE_PROJECT","DELETE_PROJECT","ADD_NEW_EVENT","event","UPDATE_EVENT","DELETE_EVENT","GET_CATEGORIES","GET_CHATS","GET_GROUPS","GET_CONTACTS","GET_MESSAGES","filteredMessages","msg","roomId","ADD_MESSAGE","GET_ORDERS","ADD_NEW_ORDER","order","UPDATE_ORDER","DELETE_ORDER","GET_CART_DATA","GET_CUSTOMERS","ADD_NEW_CUSTOMER","customer","UPDATE_CUSTOMER","DELETE_CUSTOMER","GET_SHOPS","GET_WALLET","GET_CRYPTO_ORDERS","GET_INVOICES","GET_INVOICE_DETAIL","invoice","GET_PROJECTS","GET_PROJECT_DETAIL","GET_TASKS","GET_USERS","GET_USER_PROFILE","GET_WEEKLY_DATA","GET_YEARLY_DATA","GET_MONTHLY_DATA","TOP_SELLING_DATA","month","GET_EARNING_DATA","GET_PRODUCT_COMMENTS","ON_LIKNE_COMMENT","modifiedProductComments","commentIdx","comment","commentId","replyId","replyIdx","ON_ADD_REPLY","modifiedComments","today","Date","mins","getMinutes","newReplyId","length","totalReplies","replyObj","name","profile","replyText","time","hasLiked","ON_ADD_COMMENT","commentObj","commentText"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,eAArB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,SACEC,yBADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,QAJF,EAKEC,QALF,EAMEC,YANF,EAOEC,YAPF,EAQEC,MARF,EASEC,MATF,EAUEC,WAVF,EAWEC,QAXF,EAYEC,MAZF,EAaEC,YAbF,EAcEC,QAdF,EAeEC,UAfF,EAgBEC,YAhBF,EAiBEC,cAjBF,EAkBEC,UAlBF,EAmBEC,SAnBF,EAoBEC,UApBF,EAqBEC,cArBF,EAsBEC,KAtBF,EAuBEC,KAvBF,EAwBEC,WAxBF,EAyBEC,KAAK,IAAIC,OAzBX,EA0BEC,MA1BF,EA2BEC,QA3BF,EA4BEC,SA5BF,EA6BEC,QA7BF,EA8BEC,iBA9BF,EA+BEC,iBA/BF,EAgCEC,iBAhCF,EAiCEC,iBAjCF,EAkCEC,cAlCF,EAmCEC,cAnCF,EAoCEC,cApCF,EAqCEC,cArCF,EAsCEC,eAtCF,QAuCO,mBAvCP;AAyCA,IAAId,KAAK,GAAG,CACV;AACEe,EAAAA,GAAG,EAAE,CADP;AAEEC,EAAAA,QAAQ,EAAE,OAFZ;AAGEC,EAAAA,IAAI,EAAE,OAHR;AAIEC,EAAAA,QAAQ,EAAE,QAJZ;AAKEC,EAAAA,KAAK,EAAE;AALT,CADU,EAQV;AACEJ,EAAAA,GAAG,EAAE,CADP;AAEEC,EAAAA,QAAQ,EAAE,OAFZ;AAGEC,EAAAA,IAAI,EAAE,OAHR;AAIEC,EAAAA,QAAQ,EAAE,SAJZ;AAKEC,EAAAA,KAAK,EAAE;AALT,CARU,CAAZ;;AAiBA,MAAMC,WAAW,GAAG,MAAM;AACxB;AACA,QAAMC,IAAI,GAAG,IAAIhD,WAAJ,CAAgBD,KAAhB,CAAb;AAEAiD,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAACiD,kBAAhB,EAAoCC,KAApC,CAA0CC,MAAM,IAAI;AAClD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACAzB,IAAAA,KAAK,CAAC6B,IAAN,CAAWH,IAAX;AACA,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAML,IAAN,CAAD,CAAP;AACD,OAFS,CAAV;AAGD,KAJM,CAAP;AAKD,GARD;AAUAL,EAAAA,IAAI,CAACC,MAAL,CAAY,kBAAZ,EAAgCE,KAAhC,CAAsCC,MAAM,IAAI;AAC9C,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACA,UAAMU,SAAS,GAAGpC,KAAK,CAACqC,MAAN,CAChBC,GAAG,IAAIA,GAAG,CAACnB,KAAJ,KAAcO,IAAI,CAACP,KAAnB,IAA4BmB,GAAG,CAACpB,QAAJ,KAAiBQ,IAAI,CAACR,QADzC,CAAlB;AAIA,WAAO,IAAIY,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIG,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;AAC7BL,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMK,SAAS,CAAC,CAAD,CAAf,CAAD,CAAP;AACD,SAFD,MAEO;AACLJ,UAAAA,MAAM,CAAC,CACL,+EADK,CAAD,CAAN;AAGD;AACF,OARS,CAAV;AASD,KAVM,CAAP;AAWD,GAlBD;AAoBAX,EAAAA,IAAI,CAACC,MAAL,CAAY,kBAAZ,EAAgCE,KAAhC,CAAsCC,MAAM,IAAI;AAC9C;AAEA,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,yCAAN,CAAD,CAAP;AACD,OAFS,CAAV;AAGD,KAJM,CAAP;AAKD,GARD;AAUAV,EAAAA,IAAI,CAACC,MAAL,CAAY,oBAAZ,EAAkCE,KAAlC,CAAwCC,MAAM,IAAI;AAChD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACAzB,IAAAA,KAAK,CAAC6B,IAAN,CAAWH,IAAX;AAEA,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAML,IAAN,CAAD,CAAP;AACD,OAFS,CAAV;AAGD,KAJM,CAAP;AAKD,GATD;AAWAL,EAAAA,IAAI,CAACC,MAAL,CAAY,iBAAZ,EAA+BE,KAA/B,CAAqCC,MAAM,IAAI;AAC7C,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AACA,UAAMW,SAAS,GAAGpC,KAAK,CAACqC,MAAN,CAChBC,GAAG,IAAIA,GAAG,CAACnB,KAAJ,KAAcO,IAAI,CAACP,KAAnB,IAA4BmB,GAAG,CAACpB,QAAJ,KAAiBQ,IAAI,CAACR,QADzC,CAAlB;AAIA,WAAO,IAAIY,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIG,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;AAC7B;AACA,gBAAMG,KAAK,GAAGhE,WAAd,CAF6B,CAI7B;;AACA,gBAAMiE,QAAQ,GAAG;AAAEjE,YAAAA,WAAW,EAAEgE;AAAf,WAAjB,CAL6B,CAKW;;AACxC,gBAAME,YAAY,GAAG,EAAE,GAAGL,SAAS,CAAC,CAAD,CAAd;AAAmB,eAAGI;AAAtB,WAArB,CAN6B,CAMyB;;AAEtDT,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMU,YAAN,CAAD,CAAP;AACD,SATD,MASO;AACLT,UAAAA,MAAM,CAAC,CACL,GADK,EAEL,+EAFK,CAAD,CAAN;AAID;AACF,OAhBS,CAAV;AAiBD,KAlBM,CAAP;AAmBD,GAzBD;AA2BAX,EAAAA,IAAI,CAACC,MAAL,CAAY,mBAAZ,EAAiCE,KAAjC,CAAuCC,MAAM,IAAI;AAC/C,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AAEA,UAAMiB,GAAG,GAAGjB,MAAM,CAACkB,OAAnB;AAEA,QAAIC,UAAU,GAAGF,GAAG,CAACG,aAArB;AAEA,UAAMT,SAAS,GAAGpC,KAAK,CAACqC,MAAN,CAAaC,GAAG,IAAIA,GAAG,CAACvB,GAAJ,KAAYW,IAAI,CAACoB,GAArC,CAAlB;AAEA,WAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf;AACA,YAAIW,UAAU,KAAKrE,WAAnB,EAAgC;AAC9B,cAAI6D,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;AAC7B,gBAAIW,QAAJ,CAD6B,CAG7B;;AACAA,YAAAA,QAAQ,GAAG/C,KAAK,CAACgD,SAAN,CAAgBC,GAAG,IAAIA,GAAG,CAAClC,GAAJ,KAAYW,IAAI,CAACoB,GAAxC,CAAX,CAJ6B,CAM7B;;AACA9C,YAAAA,KAAK,CAAC+C,QAAD,CAAL,CAAgB/B,QAAhB,GAA2BU,IAAI,CAACV,QAAhC,CAP6B,CAS7B;;AACAkC,YAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAD,YAAAA,YAAY,CAACE,OAAb,CAAqB,UAArB,EAAiCzB,IAAI,CAAC0B,SAAL,CAAerD,KAAK,CAAC+C,QAAD,CAApB,CAAjC;AAEAhB,YAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,8BAAN,CAAD,CAAP;AACD,WAdD,MAcO;AACLC,YAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kCAAN,CAAD,CAAN;AACD;AACF,SAlBD,MAkBO;AACLA,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kBAAN,CAAD,CAAN;AACD;AACF,OAvBS,CAAV;AAwBD,KAzBM,CAAP;AA0BD,GAnCD;AAqCAX,EAAAA,IAAI,CAACC,MAAL,CAAY,oBAAZ,EAAkCE,KAAlC,CAAwCC,MAAM,IAAI;AAChD,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AAEA,UAAMW,SAAS,GAAGpC,KAAK,CAACqC,MAAN,CAAaC,GAAG,IAAIA,GAAG,CAACvB,GAAJ,KAAYW,IAAI,CAACoB,GAArC,CAAlB;AAEA,WAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIG,SAAS,CAAC,QAAD,CAAT,KAAwB,CAA5B,EAA+B;AAC7B,cAAIW,QAAJ,CAD6B,CAG7B;;AACAA,UAAAA,QAAQ,GAAG/C,KAAK,CAACgD,SAAN,CAAgBC,GAAG,IAAIA,GAAG,CAAClC,GAAJ,KAAYW,IAAI,CAACoB,GAAxC,CAAX,CAJ6B,CAM7B;;AACA9C,UAAAA,KAAK,CAAC+C,QAAD,CAAL,CAAgB/B,QAAhB,GAA2BU,IAAI,CAACV,QAAhC,CAP6B,CAS7B;;AACAkC,UAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAD,UAAAA,YAAY,CAACE,OAAb,CAAqB,UAArB,EAAiCzB,IAAI,CAAC0B,SAAL,CAAerD,KAAK,CAAC+C,QAAD,CAApB,CAAjC;AAEAhB,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,8BAAN,CAAD,CAAP;AACD,SAdD,MAcO;AACLC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kCAAN,CAAD,CAAN;AACD;AACF,OAlBS,CAAV;AAmBD,KApBM,CAAP;AAqBD,GA1BD;AA4BAX,EAAAA,IAAI,CAACC,MAAL,CAAY,iBAAZ,EAA+BE,KAA/B,CAAqCC,MAAM,IAAI;AAC7C;AAEA,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACfF,QAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,yCAAN,CAAD,CAAP;AACD,OAFS,CAAV;AAGD,KAJM,CAAP;AAKD,GARD;AAUAV,EAAAA,IAAI,CAACC,MAAL,CAAY,eAAZ,EAA6BE,KAA7B,CAAmCC,MAAM,IAAI;AAC3C,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAAC,MAAD,CAAjB,CAAb;AAEA,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIP,IAAI,IAAIA,IAAI,CAACa,KAAjB,EAAwB;AACtB;AACA,gBAAMA,KAAK,GAAGhE,WAAd,CAFsB,CAItB;;AACA,gBAAMiE,QAAQ,GAAG;AAAEjE,YAAAA,WAAW,EAAEgE;AAAf,WAAjB,CALsB,CAKkB;;AACxC,gBAAME,YAAY,GAAG,EAAE,GAAGf,IAAI,CAAC,CAAD,CAAT;AAAc,eAAGc;AAAjB,WAArB,CANsB,CAM2B;;AAEjDT,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMU,YAAN,CAAD,CAAP;AACD,SATD,MASO;AACLT,UAAAA,MAAM,CAAC,CACL,GADK,EAEL,+EAFK,CAAD,CAAN;AAID;AACF,OAhBS,CAAV;AAiBD,KAlBM,CAAP;AAmBD,GAtBD;AAwBAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACiF,YAAf,EAA6B/B,KAA7B,CAAmC,MAAM;AACvC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI7C,YAAJ,EAAkB;AAChB;AACA2C,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM3C,YAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL4C,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAW,IAAIE,MAAJ,CAAY,GAAElF,GAAG,CAACmF,mBAAoB,IAAtC,CAAX,EAAuDjC,KAAvD,CAA6DC,MAAM,IAAI;AACrE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI7C,YAAJ,EAAkB;AAChB;AACA,gBAAM;AAAEsE,YAAAA;AAAF,cAAajC,MAAnB;AACA,gBAAMkC,OAAO,GAAGvE,YAAY,CAACwE,IAAb,CACdD,OAAO,IAAIA,OAAO,CAACE,EAAR,CAAWC,QAAX,OAA0BJ,MAAM,CAACG,EAAP,CAAUC,QAAV,EADvB,CAAhB;AAGA/B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM,EAAE,GAAG4B,OAAL;AAAc/D,YAAAA,cAAd;AAA8BjB,YAAAA;AAA9B,WAAN,CAAD,CAAP;AACD,SAPD,MAOO;AACLqD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,2BAAN,CAAD,CAAN;AACD;AACF,OAXS,CAAV;AAYD,KAbM,CAAP;AAcD,GAfD;AAiBAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACyF,UAAf,EAA2BvC,KAA3B,CAAiC,MAAM;AACrC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIlD,MAAJ,EAAY;AACV;AACAgD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMhD,MAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLiD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,mBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC0F,eAAf,EAAgCxC,KAAhC,CAAsC,MAAM;AAC1C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI3C,UAAJ,EAAgB;AACd;AACAyC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMzC,UAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL0C,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAAC2F,kBAAhB,EAAoCzC,KAApC,CAA0C0C,SAAS,IAAI;AACrD,WAAO,IAAIpC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIiC,SAAS,IAAIA,SAAS,CAACC,IAA3B,EAAiC;AAC/B;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMmC,SAAS,CAACC,IAAhB,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAAC+C,QAAL,CAAc9F,GAAG,CAAC+F,iBAAlB,EAAqC7C,KAArC,CAA2CC,MAAM,IAAI;AACnD,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,IAAIA,MAAM,CAACkB,OAArB,EAA8B;AAC5B;AACAZ,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAACkB,OAAP,CAAeuB,SAArB,CAAD,CAAP;AACD,SAHD,MAGO;AACLlC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,yBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACgG,iBAAf,EAAkC9C,KAAlC,CAAwC,MAAM;AAC5C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI1C,YAAJ,EAAkB;AAChB;AACAwC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMxC,YAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLyC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,yBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACiG,mBAAf,EAAoC/C,KAApC,CAA0C,MAAM;AAC9C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIzC,cAAJ,EAAoB;AAClB;AACAuC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMvC,cAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLwC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,2BAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAYAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACkG,eAAf,EAAgChD,KAAhC,CAAsC,MAAM;AAC1C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAItC,UAAJ,EAAgB;AACd;AACAoC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMpC,UAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLqC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAYAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACmG,eAAf,EAAgCjD,KAAhC,CAAsC,MAAM;AAC1C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIxC,UAAJ,EAAgB;AACd;AACAsC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMtC,UAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLuC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAYAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACoG,cAAf,EAA+BlD,KAA/B,CAAqC,MAAM;AACzC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIvC,SAAJ,EAAe;AACb;AACAqC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMrC,SAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLsC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,sBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAACqG,YAAhB,EAA8BnD,KAA9B,CAAoCE,IAAI,IAAI;AAC1C,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIP,IAAI,IAAIA,IAAI,CAACyC,IAAjB,EAAuB;AACrB;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAML,IAAI,CAACyC,IAAX,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,iBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACuD,KAAL,CAAWtG,GAAG,CAACuG,WAAf,EAA4BrD,KAA5B,CAAkCE,IAAI,IAAI;AACxC,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIP,IAAI,IAAIA,IAAI,CAACyC,IAAjB,EAAuB;AACrB;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAML,IAAI,CAACyC,IAAX,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAAC+C,QAAL,CAAc9F,GAAG,CAACwG,WAAlB,EAA+BtD,KAA/B,CAAqCC,MAAM,IAAI;AAC7C,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,IAAIA,MAAM,CAACkB,OAArB,EAA8B;AAC5B;AACAZ,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAACkB,OAAP,CAAejB,IAArB,CAAD,CAAP;AACD,SAHD,MAGO;AACLM,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAACyG,eAAhB,EAAiCvD,KAAjC,CAAuCwD,OAAO,IAAI;AAChD,WAAO,IAAIlD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI+C,OAAO,IAAIA,OAAO,CAACb,IAAvB,EAA6B;AAC3B;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMiD,OAAO,CAACb,IAAd,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACuD,KAAL,CAAWtG,GAAG,CAAC2G,cAAf,EAA+BzD,KAA/B,CAAqCwD,OAAO,IAAI;AAC9C,WAAO,IAAIlD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI+C,OAAO,IAAIA,OAAO,CAACb,IAAvB,EAA6B;AAC3B;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMiD,OAAO,CAACb,IAAd,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAAC+C,QAAL,CAAc9F,GAAG,CAAC4G,cAAlB,EAAkC1D,KAAlC,CAAwCC,MAAM,IAAI;AAChD,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,IAAIA,MAAM,CAACkB,OAArB,EAA8B;AAC5B;AACAZ,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAACkB,OAAP,CAAeqC,OAArB,CAAD,CAAP;AACD,SAHD,MAGO;AACLhD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAAC6G,aAAhB,EAA+B3D,KAA/B,CAAqC4D,KAAK,IAAI;AAC5C,WAAO,IAAItD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAImD,KAAK,IAAIA,KAAK,CAACjB,IAAnB,EAAyB;AACvB;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMqD,KAAK,CAACjB,IAAZ,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACuD,KAAL,CAAWtG,GAAG,CAAC+G,YAAf,EAA6B7D,KAA7B,CAAmC4D,KAAK,IAAI;AAC1C,WAAO,IAAItD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAImD,KAAK,IAAIA,KAAK,CAACjB,IAAnB,EAAyB;AACvB;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMqD,KAAK,CAACjB,IAAZ,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAAC+C,QAAL,CAAc9F,GAAG,CAACgH,YAAlB,EAAgC9D,KAAhC,CAAsCC,MAAM,IAAI;AAC9C,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,IAAIA,MAAM,CAACkB,OAArB,EAA8B;AAC5B;AACAZ,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAACkB,OAAP,CAAeyC,KAArB,CAAD,CAAP;AACD,SAHD,MAGO;AACLpD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACiH,cAAf,EAA+B/D,KAA/B,CAAqC,MAAM;AACzC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIzD,yBAAJ,EAA+B;AAC7B;AACAuD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMvD,yBAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLwD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACkH,SAAf,EAA0BhE,KAA1B,CAAgC,MAAM;AACpC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIvD,KAAJ,EAAW;AACT;AACAqD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMrD,KAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLsD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACmH,UAAf,EAA2BjE,KAA3B,CAAiC,MAAM;AACrC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIjD,MAAJ,EAAY;AACV;AACA+C,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM/C,MAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLgD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,mBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACoH,YAAf,EAA6BlE,KAA7B,CAAmC,MAAM;AACvC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIrD,QAAJ,EAAc;AACZ;AACAmD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMnD,QAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLoD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAW,IAAIE,MAAJ,CAAY,GAAElF,GAAG,CAACqH,YAAa,IAA/B,CAAX,EAAgDnE,KAAhD,CAAsDC,MAAM,IAAI;AAC9D,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI/C,QAAJ,EAAc;AACZ;AACA,gBAAM;AAAEwE,YAAAA;AAAF,cAAajC,MAAnB;AACA,gBAAMmE,gBAAgB,GAAG1G,QAAQ,CAACmD,MAAT,CACvBwD,GAAG,IAAIA,GAAG,CAACC,MAAJ,KAAepC,MAAM,CAACoC,MADN,CAAzB;AAGA/D,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM6D,gBAAN,CAAD,CAAP;AACD,SAPD,MAOO;AACL5D,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAXS,CAAV;AAYD,KAbM,CAAP;AAcD,GAfD;AAiBAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAACyH,WAAhB,EAA6BvE,KAA7B,CAAmCC,MAAM,IAAI;AAC3C,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,CAAC0C,IAAX,EAAiB;AACf;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAAC0C,IAAb,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC0H,UAAf,EAA2BxE,KAA3B,CAAiC,MAAM;AACrC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI9C,MAAJ,EAAY;AACV;AACA4C,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM5C,MAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL6C,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,mBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAAC2H,aAAhB,EAA+BzE,KAA/B,CAAqC0E,KAAK,IAAI;AAC5C,WAAO,IAAIpE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIiE,KAAK,IAAIA,KAAK,CAAC/B,IAAnB,EAAyB;AACvB;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMmE,KAAK,CAAC/B,IAAZ,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACuD,KAAL,CAAWtG,GAAG,CAAC6H,YAAf,EAA6B3E,KAA7B,CAAmC0E,KAAK,IAAI;AAC1C,WAAO,IAAIpE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIiE,KAAK,IAAIA,KAAK,CAAC/B,IAAnB,EAAyB;AACvB;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMmE,KAAK,CAAC/B,IAAZ,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAAC+C,QAAL,CAAc9F,GAAG,CAAC8H,YAAlB,EAAgC5E,KAAhC,CAAsCC,MAAM,IAAI;AAC9C,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,IAAIA,MAAM,CAACkB,OAArB,EAA8B;AAC5B;AACAZ,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAACkB,OAAP,CAAeuD,KAArB,CAAD,CAAP;AACD,SAHD,MAGO;AACLlE,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC+H,aAAf,EAA8B7E,KAA9B,CAAoC,MAAM;AACxC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIxD,QAAJ,EAAc;AACZ;AACAsD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMtD,QAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLuD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,sBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACgI,aAAf,EAA8B9E,KAA9B,CAAoC,MAAM;AACxC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAInD,YAAJ,EAAkB;AAChB;AACAiD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMjD,YAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLkD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,2BAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAYhD,GAAG,CAACiI,gBAAhB,EAAkC/E,KAAlC,CAAwCgF,QAAQ,IAAI;AAClD,WAAO,IAAI1E,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIuE,QAAQ,IAAIA,QAAQ,CAACrC,IAAzB,EAA+B;AAC7B;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMyE,QAAQ,CAACrC,IAAf,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACuD,KAAL,CAAWtG,GAAG,CAACmI,eAAf,EAAgCjF,KAAhC,CAAsCgF,QAAQ,IAAI;AAChD,WAAO,IAAI1E,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIuE,QAAQ,IAAIA,QAAQ,CAACrC,IAAzB,EAA+B;AAC7B;AACApC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMyE,QAAQ,CAACrC,IAAf,CAAD,CAAP;AACD,SAHD,MAGO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,wBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAAC+C,QAAL,CAAc9F,GAAG,CAACoI,eAAlB,EAAmClF,KAAnC,CAAyCC,MAAM,IAAI;AACjD,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIR,MAAM,IAAIA,MAAM,CAACkB,OAArB,EAA8B;AAC5B;AACAZ,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMN,MAAM,CAACkB,OAAP,CAAe6D,QAArB,CAAD,CAAP;AACD,SAHD,MAGO;AACLxE,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,wBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACqI,SAAf,EAA0BnF,KAA1B,CAAgC,MAAM;AACpC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIpC,KAAJ,EAAW;AACT;AACAkC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMlC,KAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLmC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,uBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACsI,UAAf,EAA2BpF,KAA3B,CAAiC,MAAM;AACrC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI/B,MAAJ,EAAY;AACV;AACA6B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM7B,MAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL8B,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,wBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACuI,iBAAf,EAAkCrF,KAAlC,CAAwC,MAAM;AAC5C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIpD,YAAJ,EAAkB;AAChB;AACAkD,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMlD,YAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLmD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,mBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACwI,YAAf,EAA6BtF,KAA7B,CAAmC,MAAM;AACvC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIhD,WAAJ,EAAiB;AACf;AACA8C,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM9C,WAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL+C,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAW,IAAIE,MAAJ,CAAY,GAAElF,GAAG,CAACyI,kBAAmB,IAArC,CAAX,EAAsDvF,KAAtD,CAA4DC,MAAM,IAAI;AACpE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIhD,WAAJ,EAAiB;AACf;AACA,gBAAM;AAAEyE,YAAAA;AAAF,cAAajC,MAAnB;AACA,gBAAMuF,OAAO,GAAG/H,WAAW,CAAC2E,IAAZ,CACdoD,OAAO,IAAIA,OAAO,CAACnD,EAAR,CAAWC,QAAX,OAA0BJ,MAAM,CAACG,EAAP,CAAUC,QAAV,EADvB,CAAhB;AAGA/B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMiF,OAAN,CAAD,CAAP;AACD,SAPD,MAOO;AACLhF,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAXS,CAAV;AAYD,KAbM,CAAP;AAcD,GAfD;AAiBAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC2I,YAAf,EAA6BzF,KAA7B,CAAmC,MAAM;AACvC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI5C,QAAJ,EAAc;AACZ;AACA0C,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM1C,QAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL2C,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,qBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAW,IAAIE,MAAJ,CAAY,GAAElF,GAAG,CAAC4I,kBAAmB,IAArC,CAAX,EAAsD1F,KAAtD,CAA4DC,MAAM,IAAI;AACpE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI5C,QAAJ,EAAc;AACZ;AACA,gBAAM;AAAEqE,YAAAA;AAAF,cAAajC,MAAnB;AACA,gBAAMuD,OAAO,GAAG3F,QAAQ,CAACuE,IAAT,CACdoB,OAAO,IAAIA,OAAO,CAACnB,EAAR,CAAWC,QAAX,OAA0BJ,MAAM,CAACG,EAAP,CAAUC,QAAV,EADvB,CAAhB;AAGA/B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMiD,OAAN,CAAD,CAAP;AACD,SAPD,MAOO;AACLhD,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,2BAAN,CAAD,CAAN;AACD;AACF,OAXS,CAAV;AAYD,KAbM,CAAP;AAcD,GAfD;AAiBAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC6I,SAAf,EAA0B3F,KAA1B,CAAgC,MAAM;AACpC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAInC,KAAJ,EAAW;AACT;AACAiC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMjC,KAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLkC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC8I,SAAf,EAA0B5F,KAA1B,CAAgC,MAAM;AACpC,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIhC,OAAJ,EAAa;AACX;AACA8B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM9B,OAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL+B,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,kBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAAC+I,gBAAf,EAAiC7F,KAAjC,CAAuC,MAAM;AAC3C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIlC,WAAJ,EAAiB;AACf;AACAgC,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMhC,WAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLiC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,yBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACgJ,eAAf,EAAgC9F,KAAhC,CAAsC,MAAM;AAC1C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI5B,QAAJ,EAAc;AACZ;AACA0B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM1B,QAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL2B,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,wBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACiJ,eAAf,EAAgC/F,KAAhC,CAAsC,MAAM;AAC1C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI9B,QAAJ,EAAc;AACZ;AACA4B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM5B,QAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL6B,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,wBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACkJ,gBAAf,EAAiChG,KAAjC,CAAuC,MAAM;AAC3C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAI7B,SAAJ,EAAe;AACb;AACA2B,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM3B,SAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACL4B,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,wBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACiC,KAAL,CAAW,IAAIE,MAAJ,CAAY,GAAElF,GAAG,CAACmJ,gBAAiB,IAAnC,CAAX,EAAoDjG,KAApD,CAA0DC,MAAM,IAAI;AAClE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAM;AAAE0B,QAAAA;AAAF,UAAajC,MAAnB;AACAQ,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIyB,MAAM,IAAIA,MAAM,CAACgE,KAArB,EAA4B;AAC1B;AAEA,cAAIvD,IAAI,GAAG,EAAX;;AACA,cAAIT,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AAC1BvD,YAAAA,IAAI,GAAG7D,iBAAP;AACD,WAFD,MAEO,IAAIoD,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AACjCvD,YAAAA,IAAI,GAAG5D,iBAAP;AACD,WAFM,MAEA,IAAImD,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AACjCvD,YAAAA,IAAI,GAAG3D,iBAAP;AACD,WAFM,MAEA,IAAIkD,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AACjCvD,YAAAA,IAAI,GAAG1D,iBAAP;AACD;;AACDsB,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMoC,IAAN,CAAD,CAAP;AACD,SAdD,MAcO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,yBAAN,CAAD,CAAN;AACD;AACF,OAlBS,CAAV;AAmBD,KArBM,CAAP;AAsBD,GAvBD;AAyBAX,EAAAA,IAAI,CAACiC,KAAL,CAAW,IAAIE,MAAJ,CAAY,GAAElF,GAAG,CAACqJ,gBAAiB,IAAnC,CAAX,EAAoDnG,KAApD,CAA0DC,MAAM,IAAI;AAClE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAM;AAAE0B,QAAAA;AAAF,UAAajC,MAAnB;AACAQ,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIyB,MAAM,IAAIA,MAAM,CAACgE,KAArB,EAA4B;AAC1B;AACA,gBAAM;AAAEhE,YAAAA;AAAF,cAAajC,MAAnB;AACA,cAAI0C,IAAI,GAAG,EAAX;;AACA,cAAIT,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AAC1BvD,YAAAA,IAAI,GAAGzD,cAAP;AACD,WAFD,MAEO,IAAIgD,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AACjCvD,YAAAA,IAAI,GAAGxD,cAAP;AACD,WAFM,MAEA,IAAI+C,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AACjCvD,YAAAA,IAAI,GAAGvD,cAAP;AACD,WAFM,MAEA,IAAI8C,MAAM,CAACgE,KAAP,KAAiB,KAArB,EAA4B;AACjCvD,YAAAA,IAAI,GAAGtD,cAAP;AACD;;AACDkB,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMoC,IAAN,CAAD,CAAP;AACD,SAdD,MAcO;AACLnC,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,yBAAN,CAAD,CAAN;AACD;AACF,OAlBS,CAAV;AAmBD,KArBM,CAAP;AAsBD,GAvBD;AAyBAX,EAAAA,IAAI,CAACiC,KAAL,CAAWhF,GAAG,CAACsJ,oBAAf,EAAqCpG,KAArC,CAA2C,MAAM;AAC/C,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAInB,eAAJ,EAAqB;AACnB;AACAiB,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMjB,eAAN,CAAD,CAAP;AACD,SAHD,MAGO;AACLkB,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,yBAAN,CAAD,CAAN;AACD;AACF,OAPS,CAAV;AAQD,KATM,CAAP;AAUD,GAXD;AAaAX,EAAAA,IAAI,CAACC,MAAL,CAAY,IAAIkC,MAAJ,CAAY,GAAElF,GAAG,CAACuJ,gBAAiB,IAAnC,CAAZ,EAAqDrG,KAArD,CAA2DC,MAAM,IAAI;AACnE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAM;AAAEmC,QAAAA;AAAF,UAAW1C,MAAjB;AACA,YAAM;AAAEiC,QAAAA;AAAF,UAAa/B,IAAI,CAACC,KAAL,CAAWuC,IAAX,CAAnB;AAEAlC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAInB,eAAJ,EAAqB;AACnB,cAAIgH,uBAAuB,GAAG,CAAC,GAAGhH,eAAJ,CAA9B;AACA,gBAAMiH,UAAU,GAAG,CAACD,uBAAuB,IAAI,EAA5B,EAAgC9E,SAAhC,CACjBgF,OAAO,IACLA,OAAO,CAACC,SAAR,CAAkBnE,QAAlB,OAAiCJ,MAAM,CAACuE,SAAP,CAAiBnE,QAAjB,EAFlB,CAAnB;;AAIA,cAAIiE,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,gBACErE,MAAM,CAACwE,OAAP,IACAJ,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,SAApC,CAFF,EAGE;AACA,oBAAMI,QAAQ,GAAG,CACfL,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,SAApC,KAAkD,EADnC,EAEf/E,SAFe,CAGfxB,KAAK,IAAIA,KAAK,CAAC0G,OAAN,CAAcpE,QAAd,OAA6BJ,MAAM,CAACwE,OAAP,CAAepE,QAAf,EAHvB,CAAjB;;AAMA,kBAAIqE,QAAQ,GAAG,CAAC,CAAhB,EAAmB;AACjB,oBACEL,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,SAApC,EAA+CI,QAA/C,EACA,UADA,CADF,EAIE;AACAL,kBAAAA,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,SAApC,EAA+CI,QAA/C,EACE,UADF,IAEI,KAFJ;AAGD,iBARD,MAQO;AACLL,kBAAAA,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,SAApC,EAA+CI,QAA/C,EACE,UADF,IAEI,IAFJ;AAGD;AACF;AACF,aAzBD,MAyBO;AACL,kBAAIL,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,UAApC,CAAJ,EAAqD;AACnDD,gBAAAA,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,UAApC,IAAkD,KAAlD;AACD,eAFD,MAEO;AACLD,gBAAAA,uBAAuB,CAACC,UAAD,CAAvB,CAAoC,UAApC,IAAkD,IAAlD;AACD;AACF;AACF,WAvCkB,CAyCnB;;;AACAhG,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAM+F,uBAAN,CAAD,CAAP;AACD,SA3CD,MA2CO;AACL9F,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OA/CS,CAAV;AAgDD,KApDM,CAAP;AAqDD,GAtDD;AAwDAX,EAAAA,IAAI,CAACC,MAAL,CAAY,IAAIkC,MAAJ,CAAY,GAAElF,GAAG,CAAC8J,YAAa,IAA/B,CAAZ,EAAiD5G,KAAjD,CAAuDC,MAAM,IAAI;AAC/D,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAM;AAAEmC,QAAAA;AAAF,UAAW1C,MAAjB;AACA,YAAM;AAAEiC,QAAAA;AAAF,UAAa/B,IAAI,CAACC,KAAL,CAAWuC,IAAX,CAAnB;AAEAlC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAInB,eAAJ,EAAqB;AACnB,gBAAMuH,gBAAgB,GAAG,CAAC,GAAGvH,eAAJ,CAAzB;AACA,gBAAMiH,UAAU,GAAG,CAACM,gBAAgB,IAAI,EAArB,EAAyBrF,SAAzB,CACjBgF,OAAO,IACLA,OAAO,CAACC,SAAR,CAAkBnE,QAAlB,OAAiCJ,MAAM,CAACuE,SAAP,CAAiBnE,QAAjB,EAFlB,CAAnB;AAIA,gBAAMwE,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,gBAAMC,IAAI,GAAGF,KAAK,CAACG,UAAN,EAAb;;AACA,cAAIV,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,gBAAIW,UAAU,GAAG,CAAjB;;AACA,gBACEL,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,SAA7B,KACAM,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,SAA7B,EAAwCY,MAF1C,EAGE;AACA,oBAAMC,YAAY,GAAGP,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,SAA7B,CAArB;AACAW,cAAAA,UAAU,GAAGE,YAAY,CAACA,YAAY,CAACD,MAAb,GAAsB,CAAvB,CAAZ,GAAwC,CAArD;AACA,oBAAME,QAAQ,GAAG;AACfZ,gBAAAA,SAAS,EAAEvE,MAAM,CAACuE,SADH;AAEfC,gBAAAA,OAAO,EAAEQ,UAFM;AAGfhH,gBAAAA,IAAI,EAAE;AACJoH,kBAAAA,IAAI,EAAE,OADF;AAEJC,kBAAAA,OAAO,EAAE;AAFL,iBAHS;AAOff,gBAAAA,OAAO,EAAEtE,MAAM,CAACsF,SAPD;AAQfC,gBAAAA,IAAI,EAAG,GAAET,IAAK,WARC;AASfU,gBAAAA,QAAQ,EAAE;AATK,eAAjB;AAWAb,cAAAA,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,SAA7B,EAAwClG,IAAxC,CAA6C,EAAE,GAAGgH;AAAL,eAA7C;AACAR,cAAAA,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,gBAA7B,IAAiD,KAAjD;AACD,aAnBD,MAmBO;AACLM,cAAAA,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,SAA7B,IAA0C,EAA1C;AACA,oBAAMc,QAAQ,GAAG;AACfZ,gBAAAA,SAAS,EAAEvE,MAAM,CAACuE,SADH;AAEfC,gBAAAA,OAAO,EAAEQ,UAFM;AAGfhH,gBAAAA,IAAI,EAAE;AACJoH,kBAAAA,IAAI,EAAE,OADF;AAEJC,kBAAAA,OAAO,EAAE;AAFL,iBAHS;AAOff,gBAAAA,OAAO,EAAEtE,MAAM,CAACsF,SAPD;AAQfC,gBAAAA,IAAI,EAAG,GAAET,IAAK,WARC;AASfU,gBAAAA,QAAQ,EAAE;AATK,eAAjB;AAWAb,cAAAA,gBAAgB,CAACN,UAAD,CAAhB,CAA6B,SAA7B,EAAwClG,IAAxC,CAA6C,EAAE,GAAGgH;AAAL,eAA7C;AACD;AACF,WA5CkB,CA8CnB;;;AACA9G,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMsG,gBAAN,CAAD,CAAP;AACD,SAhDD,MAgDO;AACLrG,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OApDS,CAAV;AAqDD,KAzDM,CAAP;AA0DD,GA3DD;AA6DAX,EAAAA,IAAI,CAACC,MAAL,CAAY,IAAIkC,MAAJ,CAAY,GAAElF,GAAG,CAAC6K,cAAe,IAAjC,CAAZ,EAAmD3H,KAAnD,CAAyDC,MAAM,IAAI;AACjE,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAM;AAAEmC,QAAAA;AAAF,UAAW1C,MAAjB;AACA,YAAM;AAAEiC,QAAAA;AAAF,UAAa/B,IAAI,CAACC,KAAL,CAAWuC,IAAX,CAAnB;AAEAlC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAInB,eAAJ,EAAqB;AACnB,gBAAMuH,gBAAgB,GAAG,CAAC,GAAGvH,eAAJ,CAAzB;AAEA,gBAAMwH,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,gBAAMC,IAAI,GAAGF,KAAK,CAACG,UAAN,EAAb;AACA,gBAAMW,UAAU,GAAG;AACjBnB,YAAAA,SAAS,EAAEI,gBAAgB,CAACM,MAAjB,GAA0B,CADpB;AAEjBjH,YAAAA,IAAI,EAAE;AACJoH,cAAAA,IAAI,EAAE,OADF;AAEJC,cAAAA,OAAO,EAAE;AAFL,aAFW;AAMjBf,YAAAA,OAAO,EAAEtE,MAAM,CAAC2F,WANC;AAOjBJ,YAAAA,IAAI,EAAG,GAAET,IAAK,WAPG;AAQjBU,YAAAA,QAAQ,EAAE;AARO,WAAnB;AAUAb,UAAAA,gBAAgB,CAACxG,IAAjB,CAAsB,EAAE,GAAGuH;AAAL,WAAtB;AACAtI,UAAAA,eAAe,CAACe,IAAhB,CAAqB,EAAE,GAAGuH;AAAL,WAArB,EAhBmB,CAkBnB;;AACArH,UAAAA,OAAO,CAAC,CAAC,GAAD,EAAMsG,gBAAN,CAAD,CAAP;AACD,SApBD,MAoBO;AACLrG,UAAAA,MAAM,CAAC,CAAC,GAAD,EAAM,oBAAN,CAAD,CAAN;AACD;AACF,OAxBS,CAAV;AAyBD,KA7BM,CAAP;AA8BD,GA/BD;AAgCD,CAtgCD;;AAwgCA,eAAeZ,WAAf","sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\nimport {\n  calenderDefaultCategories,\n  cartData,\n  chats,\n  comments,\n  contacts,\n  cryptoOrders,\n  customerData,\n  events,\n  groups,\n  invoiceList,\n  messages,\n  orders,\n  productsData,\n  projects,\n  inboxmails,\n  starredmails,\n  importantmails,\n  draftmails,\n  sentmails,\n  trashmails,\n  recentProducts,\n  shops,\n  tasks,\n  userProfile,\n  users as members,\n  wallet,\n  yearData,\n  monthData,\n  weekData,\n  janTopSellingData,\n  decTopSellingData,\n  novTopSellingData,\n  octTopSellingData,\n  janEarningData,\n  decEarningData,\n  novEarningData,\n  octEarningData,\n  productComments,\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"1234567\",\n    email: \"rivan@korindo.co.id\",\n  }\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    console.log(user);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Updated Successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Updated Successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PRODUCTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          resolve([200, productsData])\n        } else {\n          reject([400, \"Cannot get products\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PRODUCTS_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productsData) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const product = productsData.find(\n            product => product.id.toString() === params.id.toString()\n          )\n          resolve([200, { ...product, recentProducts, comments }])\n        } else {\n          reject([400, \"Cannot get product detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INBOX_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmails) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmails])\n        } else {\n          reject([400, \"Cannot get inboxmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_INBOX_MAIL).reply(inboxmail => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (inboxmail && inboxmail.data) {\n          // Passing fake JSON data as response\n          resolve([200, inboxmail.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_INBOX_MAIL).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.inboxmail])\n        } else {\n          reject([400, \"Cannot delete inboxmail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_STARRED_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (starredmails) {\n          // Passing fake JSON data as response\n          resolve([200, starredmails])\n        } else {\n          reject([400, \"Cannot get starredmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_IMPORTANT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (importantmails) {\n          // Passing fake JSON data as response\n          resolve([200, importantmails])\n        } else {\n          reject([400, \"Cannot get importantmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_TRASH_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (trashmails) {\n          // Passing fake JSON data as response\n          resolve([200, trashmails])\n        } else {\n          reject([400, \"Cannot get trashmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_DRAFT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (draftmails) {\n          // Passing fake JSON data as response\n          resolve([200, draftmails])\n        } else {\n          reject([400, \"Cannot get draftmails\"])\n        }\n      })\n    })\n  })\n  mock.onGet(url.GET_SENT_MAILS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (sentmails) {\n          // Passing fake JSON data as response\n          resolve([200, sentmails])\n        } else {\n          reject([400, \"Cannot get sentmails\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot add user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_USER).reply(user => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.data) {\n          // Passing fake JSON data as response\n          resolve([200, user.data])\n        } else {\n          reject([400, \"Cannot update user\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_USER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.user])\n        } else {\n          reject([400, \"Cannot delete user\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot add project\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_PROJECT).reply(project => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (project && project.data) {\n          // Passing fake JSON data as response\n          resolve([200, project.data])\n        } else {\n          reject([400, \"Cannot update project\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_PROJECT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.project])\n        } else {\n          reject([400, \"Cannot delete project\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CHATS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (chats) {\n          // Passing fake JSON data as response\n          resolve([200, chats])\n        } else {\n          reject([400, \"Cannot get chats\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_GROUPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (groups) {\n          // Passing fake JSON data as response\n          resolve([200, groups])\n        } else {\n          reject([400, \"Cannot get groups\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CONTACTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (contacts) {\n          // Passing fake JSON data as response\n          resolve([200, contacts])\n        } else {\n          reject([400, \"Cannot get contacts\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_MESSAGES}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (messages) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const filteredMessages = messages.filter(\n            msg => msg.roomId === params.roomId\n          )\n          resolve([200, filteredMessages])\n        } else {\n          reject([400, \"Cannot get messages\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_MESSAGE).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config.data) {\n          // Passing fake JSON data as response\n          resolve([200, config.data])\n        } else {\n          reject([400, \"Cannot add message\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (orders) {\n          // Passing fake JSON data as response\n          resolve([200, orders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data])\n        } else {\n          reject([400, \"Cannot add order\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_ORDER).reply(order => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (order && order.data) {\n          // Passing fake JSON data as response\n          resolve([200, order.data])\n        } else {\n          reject([400, \"Cannot update order\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_ORDER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.order])\n        } else {\n          reject([400, \"Cannot delete order\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CART_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cartData) {\n          // Passing fake JSON data as response\n          resolve([200, cartData])\n        } else {\n          reject([400, \"Cannot get cart data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CUSTOMERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customerData) {\n          // Passing fake JSON data as response\n          resolve([200, customerData])\n        } else {\n          reject([400, \"Cannot get customers data\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data])\n        } else {\n          reject([400, \"Cannot add customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_CUSTOMER).reply(customer => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (customer && customer.data) {\n          // Passing fake JSON data as response\n          resolve([200, customer.data])\n        } else {\n          reject([400, \"Cannot update customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_CUSTOMER).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.customer])\n        } else {\n          reject([400, \"Cannot delete customer\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_SHOPS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shops) {\n          // Passing fake JSON data as response\n          resolve([200, shops])\n        } else {\n          reject([400, \"Cannot get shops data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_WALLET).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (wallet) {\n          // Passing fake JSON data as response\n          resolve([200, wallet])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CRYPTO_ORDERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (cryptoOrders) {\n          // Passing fake JSON data as response\n          resolve([200, cryptoOrders])\n        } else {\n          reject([400, \"Cannot get orders\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_INVOICES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          resolve([200, invoiceList])\n        } else {\n          reject([400, \"Cannot get invoices\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_INVOICE_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (invoiceList) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const invoice = invoiceList.find(\n            invoice => invoice.id.toString() === params.id.toString()\n          )\n          resolve([200, invoice])\n        } else {\n          reject([400, \"Cannot get invoice\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PROJECTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          resolve([200, projects])\n        } else {\n          reject([400, \"Cannot get projects\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_PROJECT_DETAIL}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (projects) {\n          // Passing fake JSON data as response\n          const { params } = config\n          const project = projects.find(\n            project => project.id.toString() === params.id.toString()\n          )\n          resolve([200, project])\n        } else {\n          reject([400, \"Cannot get project detail\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USERS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (members) {\n          // Passing fake JSON data as response\n          resolve([200, members])\n        } else {\n          reject([400, \"Cannot get users\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_USER_PROFILE).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userProfile) {\n          // Passing fake JSON data as response\n          resolve([200, userProfile])\n        } else {\n          reject([400, \"Cannot get user profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_WEEKLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (weekData) {\n          // Passing fake JSON data as response\n          resolve([200, weekData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_YEARLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (yearData) {\n          // Passing fake JSON data as response\n          resolve([200, yearData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_MONTHLY_DATA).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (monthData) {\n          // Passing fake JSON data as response\n          resolve([200, monthData])\n        } else {\n          reject([400, \"Cannot get wallet data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.TOP_SELLING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n\n          var data = []\n          if (params.month === \"jan\") {\n            data = janTopSellingData\n          } else if (params.month === \"dec\") {\n            data = decTopSellingData\n          } else if (params.month === \"nov\") {\n            data = novTopSellingData\n          } else if (params.month === \"oct\") {\n            data = octTopSellingData\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get selling data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(new RegExp(`${url.GET_EARNING_DATA}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { params } = config\n      setTimeout(() => {\n        if (params && params.month) {\n          // Passing fake JSON data as response\n          const { params } = config\n          var data = []\n          if (params.month === \"jan\") {\n            data = janEarningData\n          } else if (params.month === \"dec\") {\n            data = decEarningData\n          } else if (params.month === \"nov\") {\n            data = novEarningData\n          } else if (params.month === \"oct\") {\n            data = octEarningData\n          }\n          resolve([200, data])\n        } else {\n          reject([400, \"Cannot get earning data\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_PRODUCT_COMMENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (productComments) {\n          // Passing fake JSON data as response\n          resolve([200, productComments])\n        } else {\n          reject([400, \"Cannot get comment data\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(new RegExp(`${url.ON_LIKNE_COMMENT}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { data } = config\n      const { params } = JSON.parse(data)\n\n      setTimeout(() => {\n        if (productComments) {\n          var modifiedProductComments = [...productComments]\n          const commentIdx = (modifiedProductComments || []).findIndex(\n            comment =>\n              comment.commentId.toString() === params.commentId.toString()\n          )\n          if (commentIdx > -1) {\n            if (\n              params.replyId &&\n              modifiedProductComments[commentIdx][\"replies\"]\n            ) {\n              const replyIdx = (\n                modifiedProductComments[commentIdx][\"replies\"] || []\n              ).findIndex(\n                reply => reply.replyId.toString() === params.replyId.toString()\n              )\n\n              if (replyIdx > -1) {\n                if (\n                  modifiedProductComments[commentIdx][\"replies\"][replyIdx][\n                  \"hasLiked\"\n                  ]\n                ) {\n                  modifiedProductComments[commentIdx][\"replies\"][replyIdx][\n                    \"hasLiked\"\n                  ] = false\n                } else {\n                  modifiedProductComments[commentIdx][\"replies\"][replyIdx][\n                    \"hasLiked\"\n                  ] = true\n                }\n              }\n            } else {\n              if (modifiedProductComments[commentIdx][\"hasLiked\"]) {\n                modifiedProductComments[commentIdx][\"hasLiked\"] = false\n              } else {\n                modifiedProductComments[commentIdx][\"hasLiked\"] = true\n              }\n            }\n          }\n\n          // Passing fake JSON data as response\n          resolve([200, modifiedProductComments])\n        } else {\n          reject([400, \"Cannot add comment\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(new RegExp(`${url.ON_ADD_REPLY}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { data } = config\n      const { params } = JSON.parse(data)\n\n      setTimeout(() => {\n        if (productComments) {\n          const modifiedComments = [...productComments]\n          const commentIdx = (modifiedComments || []).findIndex(\n            comment =>\n              comment.commentId.toString() === params.commentId.toString()\n          )\n          const today = new Date()\n          const mins = today.getMinutes()\n          if (commentIdx > -1) {\n            var newReplyId = 1\n            if (\n              modifiedComments[commentIdx][\"replies\"] &&\n              modifiedComments[commentIdx][\"replies\"].length\n            ) {\n              const totalReplies = modifiedComments[commentIdx][\"replies\"]\n              newReplyId = totalReplies[totalReplies.length - 1] + 1\n              const replyObj = {\n                commentId: params.commentId,\n                replyId: newReplyId,\n                user: {\n                  name: \"Admin\",\n                  profile: \"avatar1\",\n                },\n                comment: params.replyText,\n                time: `${mins} mins ago`,\n                hasLiked: false,\n              }\n              modifiedComments[commentIdx][\"replies\"].push({ ...replyObj })\n              modifiedComments[commentIdx][\"showAddComment\"] = false\n            } else {\n              modifiedComments[commentIdx][\"replies\"] = []\n              const replyObj = {\n                commentId: params.commentId,\n                replyId: newReplyId,\n                user: {\n                  name: \"Admin\",\n                  profile: \"avatar1\",\n                },\n                comment: params.replyText,\n                time: `${mins} mins ago`,\n                hasLiked: false,\n              }\n              modifiedComments[commentIdx][\"replies\"].push({ ...replyObj })\n            }\n          }\n\n          // Passing fake JSON data as response\n          resolve([200, modifiedComments])\n        } else {\n          reject([400, \"Cannot add comment\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(new RegExp(`${url.ON_ADD_COMMENT}/*`)).reply(config => {\n    return new Promise((resolve, reject) => {\n      const { data } = config\n      const { params } = JSON.parse(data)\n\n      setTimeout(() => {\n        if (productComments) {\n          const modifiedComments = [...productComments]\n\n          const today = new Date()\n          const mins = today.getMinutes()\n          const commentObj = {\n            commentId: modifiedComments.length + 1,\n            user: {\n              name: \"Admin\",\n              profile: \"avatar1\",\n            },\n            comment: params.commentText,\n            time: `${mins} mins ago`,\n            hasLiked: false,\n          }\n          modifiedComments.push({ ...commentObj })\n          productComments.push({ ...commentObj })\n\n          // Passing fake JSON data as response\n          resolve([200, modifiedComments])\n        } else {\n          reject([400, \"Cannot add comment\"])\n        }\n      })\n    })\n  })\n}\n\nexport default fakeBackend\n"]},"metadata":{},"sourceType":"module"}