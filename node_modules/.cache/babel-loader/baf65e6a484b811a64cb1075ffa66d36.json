{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Code\\\\Skote_React_v3.3.1\\\\Admin-Hooks-Staterkit\\\\src\\\\pages\\\\Entrydata\\\\EntryData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { Row, Col, Card, CardBody, FormGroup, Button, CardTitle, CardSubtitle, Label, Input, Container, FormFeedback, Form } from \"reactstrap\"; // Formik validation\n\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\"; //Import Breadcrumb\n\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EntryData = () => {\n  _s();\n\n  // Form validation \n  const validation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n    initialValues: {\n      firstname: '',\n      lastname: '',\n      city: '',\n      state: '',\n      zip: ''\n    },\n    validationSchema: Yup.object({\n      firstname: Yup.string().required(\"Please Enter Your First Name\"),\n      lastname: Yup.string().required(\"Please Enter Your Last Name\"),\n      city: Yup.string().required(\"Please Enter Your City\"),\n      state: Yup.string().required(\"Please Enter Your State\"),\n      zip: Yup.string().required(\"Please Enter Your Zip\")\n    }),\n    onSubmit: values => {\n      console.log(\"values\", values);\n    }\n  }); // Form validation \n\n  const validationType = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n    initialValues: {\n      username: '',\n      password: '',\n      password1: '',\n      email: '',\n      digits: '',\n      number: '',\n      alphanumeric: ''\n    },\n    validationSchema: Yup.object().shape({\n      username: Yup.string().required(\"This value is required\"),\n      password: Yup.string().required(\"This value is required\"),\n      password1: Yup.string().when(\"password\", {\n        is: val => val && val.length > 0 ? true : false,\n        then: Yup.string().oneOf([Yup.ref(\"password\")], \"Both password need to be the same\")\n      }),\n      email: Yup.string().email(\"Must be a valid Email\").max(255).required(\"Email is required\"),\n      url: Yup.string().matches(/((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/, \"Enter correct url!\").required(\"Please enter correct Url\"),\n      digits: Yup.number().required(\"Please Enter Your Digits\"),\n      number: Yup.number().required(\"Please Enter Your Number\"),\n      alphanumeric: Yup.string().matches(/^[a-z0-9]+$/i, \"Enter correct Alphanumeric!\").required(\"Please Enter Your Alphanumeric\"),\n      textarea: Yup.string().required(\"Please Enter Your Textarea\")\n    }),\n    onSubmit: values => {\n      console.log(\"values\", values);\n    }\n  });\n  const regExp = /\\b\\d{5}\\b/; // Form validation \n\n  const rangeValidation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n    initialValues: {\n      min_Length: '',\n      max_Length: '',\n      min_Value: '',\n      max_Value: '',\n      range_Value: '',\n      regular_Exp: ''\n    },\n    validationSchema: Yup.object().shape({\n      min_Length: Yup.string().min(6, \"Must be exactly 6 digits\").required(\"Min 6 chars\"),\n      max_Length: Yup.string().max(6, \"Must be exactly 6 digits\").required(\"Max 6 chars\"),\n      min_Value: Yup.string().required(\"Min Value 6\").test('val', 'This value should be greater than or equal to 6', val => val >= 6),\n      max_Value: Yup.string().required(\"Max Value 6\").matches(/^[0-6]+$/, \"This value should be lower than or equal to 6.\"),\n      range_Value: Yup.string().required(\"range between 5 to 10\").min(5, \"This value should be between 5 and 10\").max(10, \"This value should be between 5 and 10\"),\n      regular_Exp: Yup.string().matches(/^[#0-9]+$/, \"Only Hex Value\").required(\"Only Hex Value\")\n    }),\n    onSubmit: values => {\n      console.log(\"values\", values);\n    }\n  });\n  const [formValidation, setValidation] = useState({\n    fnm: null,\n    lnm: null,\n    unm: null,\n    city: null,\n    stateV: null\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const modifiedV = { ...formValidation\n    };\n    var fnm = document.getElementById(\"validationTooltip01\").value;\n    var lnm = document.getElementById(\"validationTooltip02\").value;\n    var unm = document.getElementById(\"validationTooltipUsername\").value;\n    var city = document.getElementById(\"validationTooltip03\").value;\n    var stateV = document.getElementById(\"validationTooltip04\").value;\n\n    if (fnm === \"\") {\n      modifiedV[\"fnm\"] = false;\n    } else {\n      modifiedV[\"fnm\"] = true;\n    }\n\n    if (lnm === \"\") {\n      modifiedV[\"lnm\"] = false;\n    } else {\n      modifiedV[\"lnm\"] = true;\n    }\n\n    if (unm === \"\") {\n      modifiedV[\"unm\"] = false;\n    } else {\n      modifiedV[\"unm\"] = true;\n    }\n\n    if (city === \"\") {\n      modifiedV[\"city\"] = false;\n    } else {\n      modifiedV[\"city\"] = true;\n    }\n\n    if (stateV === \"\") {\n      modifiedV[\"stateV\"] = false;\n    } else {\n      modifiedV[\"stateV\"] = true;\n    }\n\n    setValidation(modifiedV);\n  } //for change tooltip display propery\n\n\n  const onChangeValidation = (fieldName, value) => {\n    const modifiedV = { ...validation\n    };\n\n    if (value !== \"\") {\n      modifiedV[fieldName] = true;\n    } else {\n      modifiedV[fieldName] = false;\n    }\n\n    setValidation(modifiedV);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-content\",\n      children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Form Validation | Skote - React Admin & Dashboard Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          title: \"Forms\",\n          breadcrumbItem: \"Entry data marking & upload foto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: 6,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(CardBody, {\n                children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n                  children: \"Validation type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n                  className: \"mb-3\",\n                  children: \"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form, {\n                  onSubmit: e => {\n                    e.preventDefault();\n                    validationType.handleSubmit();\n                    return false;\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EntryData, \"9iq9kewz7Iqzi5GFtlzTPAf2p28=\", false, function () {\n  return [useFormik, useFormik, useFormik];\n});\n\n_c = EntryData;\nexport default EntryData;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntryData\");","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/pages/Entrydata/EntryData.js"],"names":["React","useState","MetaTags","Row","Col","Card","CardBody","FormGroup","Button","CardTitle","CardSubtitle","Label","Input","Container","FormFeedback","Form","Yup","useFormik","Breadcrumbs","EntryData","validation","enableReinitialize","initialValues","firstname","lastname","city","state","zip","validationSchema","object","string","required","onSubmit","values","console","log","validationType","username","password","password1","email","digits","number","alphanumeric","shape","when","is","val","length","then","oneOf","ref","max","url","matches","textarea","regExp","rangeValidation","min_Length","max_Length","min_Value","max_Value","range_Value","regular_Exp","min","test","formValidation","setValidation","fnm","lnm","unm","stateV","handleSubmit","e","preventDefault","modifiedV","document","getElementById","value","onChangeValidation","fieldName"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Button,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Label,\r\n  Input,\r\n  Container,\r\n  FormFeedback,\r\n  Form,\r\n} from \"reactstrap\";\r\n// Formik validation\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\n\r\nconst EntryData = () => {\r\n\r\n  // Form validation \r\n  const validation = useFormik({\r\n    // enableReinitialize : use this flag when initial values needs to be changed\r\n    enableReinitialize: true,\r\n\r\n    initialValues: {\r\n      firstname: '',\r\n      lastname: '',\r\n      city: '',\r\n      state: '',\r\n      zip: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      firstname: Yup.string().required(\"Please Enter Your First Name\"),\r\n      lastname: Yup.string().required(\"Please Enter Your Last Name\"),\r\n      city: Yup.string().required(\"Please Enter Your City\"),\r\n      state: Yup.string().required(\"Please Enter Your State\"),\r\n      zip: Yup.string().required(\"Please Enter Your Zip\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(\"values\", values);\r\n    }\r\n  });\r\n\r\n  // Form validation \r\n  const validationType = useFormik({\r\n    // enableReinitialize : use this flag when initial values needs to be changed\r\n    enableReinitialize: true,\r\n\r\n    initialValues: {\r\n      username: '',\r\n      password: '',\r\n      password1: '',\r\n      email: '',\r\n      digits: '',\r\n      number: '',\r\n      alphanumeric: '',\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      username: Yup.string().required(\r\n        \"This value is required\"\r\n      ),\r\n      password: Yup.string().required(\r\n        \"This value is required\"\r\n      ),\r\n      password1: Yup.string().when(\"password\", {\r\n        is: val => (val && val.length > 0 ? true : false),\r\n        then: Yup.string().oneOf(\r\n          [Yup.ref(\"password\")],\r\n          \"Both password need to be the same\"\r\n        ),\r\n      }),\r\n      email: Yup.string()\r\n        .email(\"Must be a valid Email\")\r\n        .max(255)\r\n        .required(\"Email is required\"),\r\n      url: Yup.string()\r\n        .matches(\r\n          /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n          \"Enter correct url!\"\r\n        )\r\n        .required(\"Please enter correct Url\"),\r\n      digits: Yup.number().required(\r\n        \"Please Enter Your Digits\"\r\n      ),\r\n      number: Yup.number().required(\r\n        \"Please Enter Your Number\"\r\n      ),\r\n      alphanumeric: Yup.string()\r\n        .matches(\r\n          /^[a-z0-9]+$/i,\r\n          \"Enter correct Alphanumeric!\"\r\n        )\r\n        .required(\"Please Enter Your Alphanumeric\"),\r\n      textarea: Yup.string().required(\r\n        \"Please Enter Your Textarea\"\r\n      ),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(\"values\", values);\r\n    }\r\n  });\r\n  const regExp = /\\b\\d{5}\\b/;\r\n  // Form validation \r\n  const rangeValidation = useFormik({\r\n    // enableReinitialize : use this flag when initial values needs to be changed\r\n    enableReinitialize: true,\r\n\r\n    initialValues: {\r\n      min_Length: '',\r\n      max_Length: '',\r\n      min_Value: '',\r\n      max_Value: '',\r\n      range_Value: '',\r\n      regular_Exp: '',\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      min_Length: Yup.string()\r\n        .min(6, \"Must be exactly 6 digits\")\r\n        .required(\"Min 6 chars\"),\r\n      max_Length: Yup.string()\r\n        .max(6, \"Must be exactly 6 digits\")\r\n        .required(\"Max 6 chars\"),\r\n      min_Value: Yup.string().required(\"Min Value 6\").test('val', 'This value should be greater than or equal to 6', val => val >= 6),\r\n      max_Value: Yup.string().required(\"Max Value 6\").matches(/^[0-6]+$/, \"This value should be lower than or equal to 6.\"),\r\n      range_Value: Yup.string().required(\r\n        \"range between 5 to 10\"\r\n      ).min(5, \"This value should be between 5 and 10\")\r\n        .max(10, \"This value should be between 5 and 10\"),\r\n      regular_Exp: Yup.string()\r\n        .matches(\r\n          /^[#0-9]+$/,\r\n          \"Only Hex Value\"\r\n        )\r\n        .required(\"Only Hex Value\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(\"values\", values);\r\n    }\r\n  });\r\n\r\n  const [formValidation, setValidation] = useState({\r\n    fnm: null,\r\n    lnm: null,\r\n    unm: null,\r\n    city: null,\r\n    stateV: null,\r\n  });\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const modifiedV = { ...formValidation };\r\n    var fnm = document.getElementById(\"validationTooltip01\").value;\r\n    var lnm = document.getElementById(\"validationTooltip02\").value;\r\n    var unm = document.getElementById(\"validationTooltipUsername\").value;\r\n    var city = document.getElementById(\"validationTooltip03\").value;\r\n    var stateV = document.getElementById(\"validationTooltip04\").value;\r\n\r\n    if (fnm === \"\") {\r\n      modifiedV[\"fnm\"] = false;\r\n    } else {\r\n      modifiedV[\"fnm\"] = true;\r\n    }\r\n\r\n    if (lnm === \"\") {\r\n      modifiedV[\"lnm\"] = false;\r\n    } else {\r\n      modifiedV[\"lnm\"] = true;\r\n    }\r\n\r\n    if (unm === \"\") {\r\n      modifiedV[\"unm\"] = false;\r\n    } else {\r\n      modifiedV[\"unm\"] = true;\r\n    }\r\n\r\n    if (city === \"\") {\r\n      modifiedV[\"city\"] = false;\r\n    } else {\r\n      modifiedV[\"city\"] = true;\r\n    }\r\n\r\n    if (stateV === \"\") {\r\n      modifiedV[\"stateV\"] = false;\r\n    } else {\r\n      modifiedV[\"stateV\"] = true;\r\n    }\r\n    setValidation(modifiedV);\r\n  }\r\n\r\n  //for change tooltip display propery\r\n  const onChangeValidation = (fieldName, value) => {\r\n    const modifiedV = { ...validation };\r\n    if (value !== \"\") {\r\n      modifiedV[fieldName] = true;\r\n    } else {\r\n      modifiedV[fieldName] = false;\r\n    }\r\n    setValidation(modifiedV);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <MetaTags>\r\n          <title>\r\n            Form Validation | Skote - React Admin & Dashboard Template\r\n          </title>\r\n        </MetaTags>\r\n        <Container fluid={true}>\r\n          <Breadcrumbs title=\"Forms\" breadcrumbItem=\"Entry data marking & upload foto\" />\r\n          <Row>\r\n            <Col lg={6}>\r\n              <Card>\r\n                <CardBody>\r\n                  <CardTitle>Validation type</CardTitle>\r\n                  <CardSubtitle className=\"mb-3\">\r\n                    Parsley is a availity reactstrap validation. It helps you\r\n                    provide your users with feedback on their form submission\r\n                    before sending it to your server.\r\n                  </CardSubtitle>\r\n\r\n                  <Form\r\n                    onSubmit={(e) => {\r\n                      e.preventDefault();\r\n                      validationType.handleSubmit();\r\n                      return false;\r\n                    }}>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n\r\n            \r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EntryData;\r\n"]},"metadata":{},"sourceType":"module"}