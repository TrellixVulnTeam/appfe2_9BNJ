{"ast":null,"code":"import axios from \"axios\";\nimport { del, get, post, put } from \"./api_helper\";\nimport * as url from \"./url_helper\";\nimport axiosInstance from './AxiosInstace'; // Gets the logged in user data from local session\n\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem(\"user\");\n  if (user) return JSON.parse(user);\n  return null;\n}; //is user is logged in\n\n\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null;\n}; // Register Method\n\n\nconst postFakeRegister = data => {\n  return axios.post(url.POST_FAKE_REGISTER, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    let message;\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postFakeLogin = data => axiosInstance(url.POST_FAKE_LOGIN, data); // postForgetPwd\n\n\nconst postFakeForgetPwd = data => post(url.POST_FAKE_PASSWORD_FORGET, data); // Edit profile\n\n\nconst postJwtProfile = data => post(url.POST_EDIT_JWT_PROFILE, data);\n\nconst postFakeProfile = data => post(url.POST_EDIT_PROFILE, data); // Register Method\n\n\nconst postJwtRegister = (url, data) => {\n  return axios.post(url, data).then(response => {\n    if (response.status >= 200 || response.status <= 299) return response.data;\n    throw response.data;\n  }).catch(err => {\n    var message;\n\n    if (err.response && err.response.status) {\n      switch (err.response.status) {\n        case 404:\n          message = \"Sorry! the page you are looking for could not be found\";\n          break;\n\n        case 500:\n          message = \"Sorry! something went wrong, please contact our support team\";\n          break;\n\n        case 401:\n          message = \"Invalid credentials\";\n          break;\n\n        default:\n          message = err[1];\n          break;\n      }\n    }\n\n    throw message;\n  });\n}; // Login Method\n\n\nconst postJwtLogin = data => post(url.POST_FAKE_JWT_LOGIN, data); // postForgetPwd\n\n\nconst postJwtForgetPwd = data => post(url.POST_FAKE_JWT_PASSWORD_FORGET, data); // postSocialLogin\n\n\nexport const postSocialLogin = data => post(url.SOCIAL_LOGIN, data); // get Products\n\nexport const getProducts = () => get(url.GET_PRODUCTS); // get Product detail\n\nexport const getProductDetail = id => get(`${url.GET_PRODUCTS_DETAIL}/${id}`, {\n  params: {\n    id\n  }\n}); // get Events\n\nexport const getEvents = () => get(url.GET_EVENTS); // add Events\n\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event); // update Event\n\nexport const updateEvent = event => put(url.UPDATE_EVENT, event); // delete Event\n\nexport const deleteEvent = event => del(url.DELETE_EVENT, {\n  headers: {\n    event\n  }\n}); // get Categories\n\nexport const getCategories = () => get(url.GET_CATEGORIES); // get chats\n\nexport const getChats = () => get(url.GET_CHATS); // get groups\n\nexport const getGroups = () => get(url.GET_GROUPS); // get Contacts\n\nexport const getContacts = () => get(url.GET_CONTACTS); // get messages\n\nexport const getMessages = function () {\n  let roomId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return get(`${url.GET_MESSAGES}/${roomId}`, {\n    params: {\n      roomId\n    }\n  });\n}; // post messages\n\nexport const addMessage = message => post(url.ADD_MESSAGE, message); // get orders\n\nexport const getOrders = () => get(url.GET_ORDERS); // add order\n\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order); // update order\n\nexport const updateOrder = order => put(url.UPDATE_ORDER, order); // delete order\n\nexport const deleteOrder = order => del(url.DELETE_ORDER, {\n  headers: {\n    order\n  }\n}); // get cart data\n\nexport const getCartData = () => get(url.GET_CART_DATA); // get customers\n\nexport const getCustomers = () => get(url.GET_CUSTOMERS); // add CUSTOMER\n\nexport const addNewCustomer = customer => post(url.ADD_NEW_CUSTOMER, customer); // update CUSTOMER\n\nexport const updateCustomer = customer => put(url.UPDATE_CUSTOMER, customer); // delete CUSTOMER\n\nexport const deleteCustomer = customer => del(url.DELETE_CUSTOMER, {\n  headers: {\n    customer\n  }\n}); // get shops\n\nexport const getShops = () => get(url.GET_SHOPS); // get wallet\n\nexport const getWallet = () => get(url.GET_WALLET); // get crypto order\n\nexport const getCryptoOrder = () => get(url.GET_CRYPTO_ORDERS); // get invoices\n\nexport const getInvoices = () => get(url.GET_INVOICES); // get invoice details\n\nexport const getInvoiceDetail = id => get(`${url.GET_INVOICE_DETAIL}/${id}`, {\n  params: {\n    id\n  }\n}); // get project\n\nexport const getProjects = () => get(url.GET_PROJECTS); // get project details\n\nexport const getProjectsDetails = id => get(`${url.GET_PROJECT_DETAIL}/${id}`, {\n  params: {\n    id\n  }\n}); // get tasks\n\nexport const getTasks = () => get(url.GET_TASKS); // get contacts\n\nexport const getUsers = () => get(url.GET_USERS); // add user\n\nexport const addNewUser = user => post(url.ADD_NEW_USER, user); // update user\n\nexport const updateUser = user => put(url.UPDATE_USER, user); // delete user\n\nexport const deleteUser = user => del(url.DELETE_USER, {\n  headers: {\n    user\n  }\n});\n/** PROJECT */\n// add user\n\nexport const addNewProject = project => post(url.ADD_NEW_PROJECT, project); // update user\n\nexport const updateProject = project => put(url.UPDATE_PROJECT, project); // delete user\n\nexport const deleteProject = project => del(url.DELETE_PROJECT, {\n  headers: {\n    project\n  }\n});\nexport const getUserProfile = () => get(url.GET_USER_PROFILE); // get inboxmail\n\nexport const getInboxMails = () => get(url.GET_INBOX_MAILS); // add inboxmail\n\nexport const addNewInboxMail = inboxmail => post(url.ADD_NEW_INBOX_MAIL, inboxmail); // delete inboxmail\n\nexport const deleteInboxMail = inboxmail => del(url.DELETE_INBOX_MAIL, {\n  headers: {\n    inboxmail\n  }\n}); // get starredmail\n\nexport const getStarredMails = () => get(url.GET_STARRED_MAILS); // get importantmail\n\nexport const getImportantMails = () => get(url.GET_IMPORTANT_MAILS); // get sent mail\n\nexport const getSentMails = () => get(url.GET_SENT_MAILS); // get trash mail\n\nexport const getTrashMails = () => get(url.GET_TRASH_MAILS); // get starredmail\n\nexport const getDraftMails = () => get(url.GET_DRAFT_MAILS); // get dashboard charts data\n\nexport const getWeeklyData = () => get(url.GET_WEEKLY_DATA);\nexport const getYearlyData = () => get(url.GET_YEARLY_DATA);\nexport const getMonthlyData = () => get(url.GET_MONTHLY_DATA);\nexport const topSellingData = month => get(`${url.TOP_SELLING_DATA}/${month}`, {\n  params: {\n    month\n  }\n});\nexport const getEarningChartsData = month => get(`${url.GET_EARNING_DATA}/${month}`, {\n  params: {\n    month\n  }\n});\n\nconst getProductComents = () => get(url.GET_PRODUCT_COMMENTS);\n\nconst onLikeComment = (commentId, productId) => {\n  return post(`${url.ON_LIKNE_COMMENT}/${productId}/${commentId}`, {\n    params: {\n      commentId,\n      productId\n    }\n  });\n};\n\nconst onLikeReply = (commentId, productId, replyId) => {\n  return post(`${url.ON_LIKNE_COMMENT}/${productId}/${commentId}/${replyId}`, {\n    params: {\n      commentId,\n      productId,\n      replyId\n    }\n  });\n};\n\nconst onAddReply = (commentId, productId, replyText) => {\n  return post(`${url.ON_ADD_REPLY}/${productId}/${commentId}`, {\n    params: {\n      commentId,\n      productId,\n      replyText\n    }\n  });\n};\n\nconst onAddComment = (productId, commentText) => {\n  return post(`${url.ON_ADD_COMMENT}/${productId}`, {\n    params: {\n      productId,\n      commentText\n    }\n  });\n};\n\nexport { getLoggedInUser, isUserAuthenticated, postFakeRegister, postFakeLogin, postFakeProfile, postFakeForgetPwd, postJwtRegister, postJwtLogin, postJwtForgetPwd, postJwtProfile, getProductComents, onLikeComment, onLikeReply, onAddReply, onAddComment };","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/helpers/fakebackend_helper.js"],"names":["axios","del","get","post","put","url","axiosInstance","getLoggedInUser","user","localStorage","getItem","JSON","parse","isUserAuthenticated","postFakeRegister","data","POST_FAKE_REGISTER","then","response","status","catch","err","message","postFakeLogin","POST_FAKE_LOGIN","postFakeForgetPwd","POST_FAKE_PASSWORD_FORGET","postJwtProfile","POST_EDIT_JWT_PROFILE","postFakeProfile","POST_EDIT_PROFILE","postJwtRegister","postJwtLogin","POST_FAKE_JWT_LOGIN","postJwtForgetPwd","POST_FAKE_JWT_PASSWORD_FORGET","postSocialLogin","SOCIAL_LOGIN","getProducts","GET_PRODUCTS","getProductDetail","id","GET_PRODUCTS_DETAIL","params","getEvents","GET_EVENTS","addNewEvent","event","ADD_NEW_EVENT","updateEvent","UPDATE_EVENT","deleteEvent","DELETE_EVENT","headers","getCategories","GET_CATEGORIES","getChats","GET_CHATS","getGroups","GET_GROUPS","getContacts","GET_CONTACTS","getMessages","roomId","GET_MESSAGES","addMessage","ADD_MESSAGE","getOrders","GET_ORDERS","addNewOrder","order","ADD_NEW_ORDER","updateOrder","UPDATE_ORDER","deleteOrder","DELETE_ORDER","getCartData","GET_CART_DATA","getCustomers","GET_CUSTOMERS","addNewCustomer","customer","ADD_NEW_CUSTOMER","updateCustomer","UPDATE_CUSTOMER","deleteCustomer","DELETE_CUSTOMER","getShops","GET_SHOPS","getWallet","GET_WALLET","getCryptoOrder","GET_CRYPTO_ORDERS","getInvoices","GET_INVOICES","getInvoiceDetail","GET_INVOICE_DETAIL","getProjects","GET_PROJECTS","getProjectsDetails","GET_PROJECT_DETAIL","getTasks","GET_TASKS","getUsers","GET_USERS","addNewUser","ADD_NEW_USER","updateUser","UPDATE_USER","deleteUser","DELETE_USER","addNewProject","project","ADD_NEW_PROJECT","updateProject","UPDATE_PROJECT","deleteProject","DELETE_PROJECT","getUserProfile","GET_USER_PROFILE","getInboxMails","GET_INBOX_MAILS","addNewInboxMail","inboxmail","ADD_NEW_INBOX_MAIL","deleteInboxMail","DELETE_INBOX_MAIL","getStarredMails","GET_STARRED_MAILS","getImportantMails","GET_IMPORTANT_MAILS","getSentMails","GET_SENT_MAILS","getTrashMails","GET_TRASH_MAILS","getDraftMails","GET_DRAFT_MAILS","getWeeklyData","GET_WEEKLY_DATA","getYearlyData","GET_YEARLY_DATA","getMonthlyData","GET_MONTHLY_DATA","topSellingData","month","TOP_SELLING_DATA","getEarningChartsData","GET_EARNING_DATA","getProductComents","GET_PRODUCT_COMMENTS","onLikeComment","commentId","productId","ON_LIKNE_COMMENT","onLikeReply","replyId","onAddReply","replyText","ON_ADD_REPLY","onAddComment","commentText","ON_ADD_COMMENT"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { del, get, post, put } from \"./api_helper\"\nimport * as url from \"./url_helper\"\nimport axiosInstance from './AxiosInstace';\n\n// Gets the logged in user data from local session\nconst getLoggedInUser = () => {\n  const user = localStorage.getItem(\"user\")\n  if (user) return JSON.parse(user)\n  return null\n}\n\n//is user is logged in\nconst isUserAuthenticated = () => {\n  return getLoggedInUser() !== null\n}\n\n// Register Method\nconst postFakeRegister = data => {\n  return axios\n    .post(url.POST_FAKE_REGISTER, data)\n    .then(response => {\n      if (response.status >= 200 || response.status <= 299) return response.data\n      throw response.data\n    })\n    .catch(err => {\n      let message\n      if (err.response && err.response.status) {\n        switch (err.response.status) {\n          case 404:\n            message = \"Sorry! the page you are looking for could not be found\"\n            break\n          case 500:\n            message =\n              \"Sorry! something went wrong, please contact our support team\"\n            break\n          case 401:\n            message = \"Invalid credentials\"\n            break\n          default:\n            message = err[1]\n            break\n        }\n      }\n      throw message\n    })\n}\n\n// Login Method\nconst postFakeLogin = data => axiosInstance(url.POST_FAKE_LOGIN, data)\n\n// postForgetPwd\nconst postFakeForgetPwd = data => post(url.POST_FAKE_PASSWORD_FORGET, data)\n\n// Edit profile\nconst postJwtProfile = data => post(url.POST_EDIT_JWT_PROFILE, data)\n\nconst postFakeProfile = data => post(url.POST_EDIT_PROFILE, data)\n\n// Register Method\nconst postJwtRegister = (url, data) => {\n  return axios\n    .post(url, data)\n    .then(response => {\n      if (response.status >= 200 || response.status <= 299) return response.data\n      throw response.data\n    })\n    .catch(err => {\n      var message\n      if (err.response && err.response.status) {\n        switch (err.response.status) {\n          case 404:\n            message = \"Sorry! the page you are looking for could not be found\"\n            break\n          case 500:\n            message =\n              \"Sorry! something went wrong, please contact our support team\"\n            break\n          case 401:\n            message = \"Invalid credentials\"\n            break\n          default:\n            message = err[1]\n            break\n        }\n      }\n      throw message\n    })\n}\n\n// Login Method\nconst postJwtLogin = data => post(url.POST_FAKE_JWT_LOGIN, data)\n\n// postForgetPwd\nconst postJwtForgetPwd = data => post(url.POST_FAKE_JWT_PASSWORD_FORGET, data)\n\n// postSocialLogin\nexport const postSocialLogin = data => post(url.SOCIAL_LOGIN, data)\n\n// get Products\nexport const getProducts = () => get(url.GET_PRODUCTS)\n\n// get Product detail\nexport const getProductDetail = id =>\n  get(`${url.GET_PRODUCTS_DETAIL}/${id}`, { params: { id } })\n\n// get Events\nexport const getEvents = () => get(url.GET_EVENTS)\n\n// add Events\nexport const addNewEvent = event => post(url.ADD_NEW_EVENT, event)\n\n// update Event\nexport const updateEvent = event => put(url.UPDATE_EVENT, event)\n\n// delete Event\nexport const deleteEvent = event =>\n  del(url.DELETE_EVENT, { headers: { event } })\n\n// get Categories\nexport const getCategories = () => get(url.GET_CATEGORIES)\n\n// get chats\nexport const getChats = () => get(url.GET_CHATS)\n\n// get groups\nexport const getGroups = () => get(url.GET_GROUPS)\n\n// get Contacts\nexport const getContacts = () => get(url.GET_CONTACTS)\n\n// get messages\nexport const getMessages = (roomId = \"\") =>\n  get(`${url.GET_MESSAGES}/${roomId}`, { params: { roomId } })\n\n// post messages\nexport const addMessage = message => post(url.ADD_MESSAGE, message)\n\n// get orders\nexport const getOrders = () => get(url.GET_ORDERS)\n\n// add order\nexport const addNewOrder = order => post(url.ADD_NEW_ORDER, order)\n\n// update order\nexport const updateOrder = order => put(url.UPDATE_ORDER, order)\n\n// delete order\nexport const deleteOrder = order =>\n  del(url.DELETE_ORDER, { headers: { order } })\n\n// get cart data\nexport const getCartData = () => get(url.GET_CART_DATA)\n\n// get customers\nexport const getCustomers = () => get(url.GET_CUSTOMERS)\n\n// add CUSTOMER\nexport const addNewCustomer = customer => post(url.ADD_NEW_CUSTOMER, customer)\n\n// update CUSTOMER\nexport const updateCustomer = customer => put(url.UPDATE_CUSTOMER, customer)\n\n// delete CUSTOMER\nexport const deleteCustomer = customer =>\n  del(url.DELETE_CUSTOMER, { headers: { customer } })\n\n// get shops\nexport const getShops = () => get(url.GET_SHOPS)\n\n// get wallet\nexport const getWallet = () => get(url.GET_WALLET)\n\n// get crypto order\nexport const getCryptoOrder = () => get(url.GET_CRYPTO_ORDERS)\n\n// get invoices\nexport const getInvoices = () => get(url.GET_INVOICES)\n\n// get invoice details\nexport const getInvoiceDetail = id =>\n  get(`${url.GET_INVOICE_DETAIL}/${id}`, { params: { id } })\n\n// get project\nexport const getProjects = () => get(url.GET_PROJECTS)\n\n// get project details\nexport const getProjectsDetails = id =>\n  get(`${url.GET_PROJECT_DETAIL}/${id}`, { params: { id } })\n\n// get tasks\nexport const getTasks = () => get(url.GET_TASKS)\n\n// get contacts\nexport const getUsers = () => get(url.GET_USERS)\n\n// add user\nexport const addNewUser = user => post(url.ADD_NEW_USER, user)\n\n// update user\nexport const updateUser = user => put(url.UPDATE_USER, user)\n\n// delete user\nexport const deleteUser = user => del(url.DELETE_USER, { headers: { user } })\n\n/** PROJECT */\n// add user\nexport const addNewProject = project => post(url.ADD_NEW_PROJECT, project)\n\n// update user\nexport const updateProject = project => put(url.UPDATE_PROJECT, project)\n\n// delete user\nexport const deleteProject = project =>\n  del(url.DELETE_PROJECT, { headers: { project } })\n\nexport const getUserProfile = () => get(url.GET_USER_PROFILE)\n\n// get inboxmail\nexport const getInboxMails = () => get(url.GET_INBOX_MAILS)\n\n// add inboxmail\nexport const addNewInboxMail = inboxmail =>\n  post(url.ADD_NEW_INBOX_MAIL, inboxmail)\n\n// delete inboxmail\nexport const deleteInboxMail = inboxmail =>\n  del(url.DELETE_INBOX_MAIL, { headers: { inboxmail } })\n\n// get starredmail\nexport const getStarredMails = () => get(url.GET_STARRED_MAILS)\n\n// get importantmail\nexport const getImportantMails = () => get(url.GET_IMPORTANT_MAILS)\n\n// get sent mail\nexport const getSentMails = () => get(url.GET_SENT_MAILS)\n\n// get trash mail\nexport const getTrashMails = () => get(url.GET_TRASH_MAILS)\n\n// get starredmail\nexport const getDraftMails = () => get(url.GET_DRAFT_MAILS)\n\n// get dashboard charts data\nexport const getWeeklyData = () => get(url.GET_WEEKLY_DATA)\nexport const getYearlyData = () => get(url.GET_YEARLY_DATA)\nexport const getMonthlyData = () => get(url.GET_MONTHLY_DATA)\n\nexport const topSellingData = month =>\n  get(`${url.TOP_SELLING_DATA}/${month}`, { params: { month } })\n\nexport const getEarningChartsData = month =>\n  get(`${url.GET_EARNING_DATA}/${month}`, { params: { month } })\n\nconst getProductComents = () => get(url.GET_PRODUCT_COMMENTS)\n\nconst onLikeComment = (commentId, productId) => {\n  return post(`${url.ON_LIKNE_COMMENT}/${productId}/${commentId}`, {\n    params: { commentId, productId },\n  })\n}\nconst onLikeReply = (commentId, productId, replyId) => {\n  return post(`${url.ON_LIKNE_COMMENT}/${productId}/${commentId}/${replyId}`, {\n    params: { commentId, productId, replyId },\n  })\n}\n\nconst onAddReply = (commentId, productId, replyText) => {\n  return post(`${url.ON_ADD_REPLY}/${productId}/${commentId}`, {\n    params: { commentId, productId, replyText },\n  })\n}\n\nconst onAddComment = (productId, commentText) => {\n  return post(`${url.ON_ADD_COMMENT}/${productId}`, {\n    params: { productId, commentText },\n  })\n}\n\nexport {\n  getLoggedInUser,\n  isUserAuthenticated,\n  postFakeRegister,\n  postFakeLogin,\n  postFakeProfile,\n  postFakeForgetPwd,\n  postJwtRegister,\n  postJwtLogin,\n  postJwtForgetPwd,\n  postJwtProfile,\n  getProductComents,\n  onLikeComment,\n  onLikeReply,\n  onAddReply,\n  onAddComment,\n}\n"]},"metadata":{},"sourceType":"module"}