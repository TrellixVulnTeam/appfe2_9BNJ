{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"; // Login Redux States\n\nimport { LOGIN_USER, LOGOUT_USER, SOCIAL_LOGIN } from \"./actionTypes\";\nimport { apiError, loginSuccess, logoutUserSuccess } from \"./actions\";\nimport { postFakeLogin, postJwtLogin } from \"../../../helpers/fakebackend_helper\";\n\nfunction* loginUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, {\n        email: user.email,\n        password: user.password\n      });\n      console.log(\"TOKEN : \" + JSON.stringify(response));\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    }\n\n    history.push(\"/dashboard\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser(_ref2) {\n  let {\n    payload: {\n      history\n    }\n  } = _ref2;\n\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push(\"/login\");\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser);\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/store/auth/login/saga.js"],"names":["call","put","takeEvery","takeLatest","LOGIN_USER","LOGOUT_USER","SOCIAL_LOGIN","apiError","loginSuccess","logoutUserSuccess","postFakeLogin","postJwtLogin","loginUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","email","password","console","log","JSON","stringify","localStorage","setItem","push","error","logoutUser","removeItem","fireBaseBackend","logout","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,YAAlC,QAAsD,eAAtD;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,iBAAjC,QAA0D,WAA1D;AAEA,SACEC,aADF,EAEEC,YAFF,QAGO,qCAHP;;AAKA,UAAUC,SAAV,OAAoD;AAAA,MAAhC;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAX,GAAgC;;AAClD,MAAI;AACF,QAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,MAA1C,EAAkD;AAChD,YAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACU,aAAD,EAAgB;AACzCU,QAAAA,KAAK,EAAEN,IAAI,CAACM,KAD6B;AAEzCC,QAAAA,QAAQ,EAAEP,IAAI,CAACO;AAF0B,OAAhB,CAA3B;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAWC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAvB;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAjC;AACA,YAAMlB,GAAG,CAACO,YAAY,CAACW,QAAD,CAAb,CAAT;AACD;;AACDJ,IAAAA,OAAO,CAACa,IAAR,CAAa,YAAb;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACd,UAAM5B,GAAG,CAACM,QAAQ,CAACsB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,QAA+C;AAAA,MAA1B;AAAEjB,IAAAA,OAAO,EAAE;AAAEE,MAAAA;AAAF;AAAX,GAA0B;;AAC7C,MAAI;AACFW,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB;;AAEA,QAAIf,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AACpD,YAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACgC,eAAe,CAACC,MAAjB,CAA3B;AACA,YAAMhC,GAAG,CAACQ,iBAAiB,CAACU,QAAD,CAAlB,CAAT;AACD;;AACDJ,IAAAA,OAAO,CAACa,IAAR,CAAa,QAAb;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAM5B,GAAG,CAACM,QAAQ,CAACsB,KAAD,CAAT,CAAT;AACD;AACF;;AAED,UAAUK,QAAV,GAAqB;AACnB,QAAMhC,SAAS,CAACE,UAAD,EAAaQ,SAAb,CAAf;AACA,QAAMV,SAAS,CAACG,WAAD,EAAcyB,UAAd,CAAf;AACD;;AAED,eAAeI,QAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"\n\n// Login Redux States\nimport { LOGIN_USER, LOGOUT_USER, SOCIAL_LOGIN } from \"./actionTypes\"\nimport { apiError, loginSuccess, logoutUserSuccess } from \"./actions\"\n\nimport {\n  postFakeLogin,\n  postJwtLogin,\n} from \"../../../helpers/fakebackend_helper\"\n\nfunction* loginUser({ payload: { user, history } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, {\n        email: user.email,\n        password: user.password,\n      })\n      console.log(\"TOKEN : \"+JSON.stringify(response));\n      localStorage.setItem(\"authUser\", JSON.stringify(response))\n      yield put(loginSuccess(response))\n    }\n    history.push(\"/dashboard\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* logoutUser({ payload: { history } }) {\n  try {\n    localStorage.removeItem(\"authUser\")\n\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.logout)\n      yield put(logoutUserSuccess(response))\n    }\n    history.push(\"/login\")\n  } catch (error) {\n    yield put(apiError(error))\n  }\n}\n\nfunction* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser)\n  yield takeEvery(LOGOUT_USER, logoutUser)\n}\n\nexport default authSaga\n"]},"metadata":{},"sourceType":"module"}