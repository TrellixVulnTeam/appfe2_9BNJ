{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Code\\\\Skote_React_v3.3.1\\\\Admin-Hooks-Staterkit\\\\src\\\\pages\\\\Entrydata\\\\EntryData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { Row, Col, Card, CardBody, FormGroup, Button, CardTitle, CardSubtitle, Label, Input, Container, FormFeedback, Form } from \"reactstrap\"; // Formik validation\n\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\"; //Import Breadcrumb\n\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EntryData = () => {\n  _s();\n\n  const rangeValidation = useFormik({\n    // enableReinitialize : use this flag when initial values needs to be changed\n    enableReinitialize: true,\n    initialValues: {\n      min_Length: '',\n      max_Length: '',\n      min_Value: '',\n      max_Value: '',\n      range_Value: '',\n      regular_Exp: ''\n    },\n    validationSchema: Yup.object().shape({\n      min_Length: Yup.string().min(6, \"Must be exactly 6 digits\").required(\"Min 6 chars\"),\n      max_Length: Yup.string().max(6, \"Must be exactly 6 digits\").required(\"Max 6 chars\"),\n      min_Value: Yup.string().required(\"Min Value 6\").test('val', 'This value should be greater than or equal to 6', val => val >= 6),\n      max_Value: Yup.string().required(\"Max Value 6\").matches(/^[0-6]+$/, \"This value should be lower than or equal to 6.\"),\n      range_Value: Yup.string().required(\"range between 5 to 10\").min(5, \"This value should be between 5 and 10\").max(10, \"This value should be between 5 and 10\"),\n      regular_Exp: Yup.string().matches(/^[#0-9]+$/, \"Only Hex Value\").required(\"Only Hex Value\")\n    }),\n    onSubmit: values => {\n      console.log(\"values\", values);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-content\",\n      children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"Form Validation | Skote - React Admin & Dashboard Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          title: \"Forms\",\n          breadcrumbItem: \"Entry data marking & upload foto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: 6,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(CardBody, {\n                children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n                  children: \"Validation type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(CardSubtitle, {\n                  className: \"mb-3\",\n                  children: \"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form, {\n                  onSubmit: e => {\n                    e.preventDefault();\n                    rangeValidation.handleSubmit();\n                    return false;\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mb-3\",\n                    children: [/*#__PURE__*/_jsxDEV(Label, {\n                      children: \"Kode User\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Input, {\n                      name: \"max_Length\",\n                      placeholder: \"Max 3 chars\",\n                      type: \"number\",\n                      onChange: rangeValidation.handleChange,\n                      onBlur: rangeValidation.handleBlur,\n                      value: rangeValidation.values.max_Length || \"\",\n                      invalid: rangeValidation.touched.max_Length && rangeValidation.errors.max_Length ? true : false\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 94,\n                      columnNumber: 23\n                    }, this), rangeValidation.touched.max_Length && rangeValidation.errors.max_Length ? /*#__PURE__*/_jsxDEV(FormFeedback, {\n                      type: \"invalid\",\n                      children: rangeValidation.errors.max_Length\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 106,\n                      columnNumber: 25\n                    }, this) : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EntryData, \"+DOPbynR7XtfqElzQfMQrbap7OA=\", false, function () {\n  return [useFormik];\n});\n\n_c = EntryData;\nexport default EntryData;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntryData\");","map":{"version":3,"sources":["D:/React_Code/Skote_React_v3.3.1/Admin-Hooks-Staterkit/src/pages/Entrydata/EntryData.js"],"names":["React","useState","MetaTags","Row","Col","Card","CardBody","FormGroup","Button","CardTitle","CardSubtitle","Label","Input","Container","FormFeedback","Form","Yup","useFormik","Breadcrumbs","EntryData","rangeValidation","enableReinitialize","initialValues","min_Length","max_Length","min_Value","max_Value","range_Value","regular_Exp","validationSchema","object","shape","string","min","required","max","test","val","matches","onSubmit","values","console","log","e","preventDefault","handleSubmit","handleChange","handleBlur","touched","errors"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,SACEC,GADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,SALF,EAMEC,MANF,EAOEC,SAPF,EAQEC,YARF,EASEC,KATF,EAUEC,KAVF,EAWEC,SAXF,EAYEC,YAZF,EAaEC,IAbF,QAcO,YAdP,C,CAeA;;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,oCAAxB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEtB,QAAMC,eAAe,GAAGH,SAAS,CAAC;AAChC;AACAI,IAAAA,kBAAkB,EAAE,IAFY;AAIhCC,IAAAA,aAAa,EAAE;AACbC,MAAAA,UAAU,EAAE,EADC;AAEbC,MAAAA,UAAU,EAAE,EAFC;AAGbC,MAAAA,SAAS,EAAE,EAHE;AAIbC,MAAAA,SAAS,EAAE,EAJE;AAKbC,MAAAA,WAAW,EAAE,EALA;AAMbC,MAAAA,WAAW,EAAE;AANA,KAJiB;AAYhCC,IAAAA,gBAAgB,EAAEb,GAAG,CAACc,MAAJ,GAAaC,KAAb,CAAmB;AACnCR,MAAAA,UAAU,EAAEP,GAAG,CAACgB,MAAJ,GACTC,GADS,CACL,CADK,EACF,0BADE,EAETC,QAFS,CAEA,aAFA,CADuB;AAInCV,MAAAA,UAAU,EAAER,GAAG,CAACgB,MAAJ,GACTG,GADS,CACL,CADK,EACF,0BADE,EAETD,QAFS,CAEA,aAFA,CAJuB;AAOnCT,MAAAA,SAAS,EAAET,GAAG,CAACgB,MAAJ,GAAaE,QAAb,CAAsB,aAAtB,EAAqCE,IAArC,CAA0C,KAA1C,EAAiD,iDAAjD,EAAoGC,GAAG,IAAIA,GAAG,IAAI,CAAlH,CAPwB;AAQnCX,MAAAA,SAAS,EAAEV,GAAG,CAACgB,MAAJ,GAAaE,QAAb,CAAsB,aAAtB,EAAqCI,OAArC,CAA6C,UAA7C,EAAyD,gDAAzD,CARwB;AASnCX,MAAAA,WAAW,EAAEX,GAAG,CAACgB,MAAJ,GAAaE,QAAb,CACX,uBADW,EAEXD,GAFW,CAEP,CAFO,EAEJ,uCAFI,EAGVE,GAHU,CAGN,EAHM,EAGF,uCAHE,CATsB;AAanCP,MAAAA,WAAW,EAAEZ,GAAG,CAACgB,MAAJ,GACVM,OADU,CAET,WAFS,EAGT,gBAHS,EAKVJ,QALU,CAKD,gBALC;AAbsB,KAAnB,CAZc;AAgChCK,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AACD;AAlC+B,GAAD,CAAjC;AAqCA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,QAAD;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE,IAAlB;AAAA,gCACE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAC,OAAnB;AAA2B,UAAA,cAAc,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,GAAD;AAAA,iCACE,QAAC,GAAD;AAAK,YAAA,EAAE,EAAE,CAAT;AAAA,mCACE,QAAC,IAAD;AAAA,qCACE,QAAC,QAAD;AAAA,wCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,YAAD;AAAc,kBAAA,SAAS,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,eAQE,QAAC,IAAD;AACE,kBAAA,QAAQ,EAAGG,CAAD,IAAO;AACfA,oBAAAA,CAAC,CAACC,cAAF;AACAxB,oBAAAA,eAAe,CAACyB,YAAhB;AACA,2BAAO,KAAP;AACD,mBALH;AAAA,yCAME;AAAK,oBAAA,SAAS,EAAC,MAAf;AAAA,4CACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,QAAC,KAAD;AACE,sBAAA,IAAI,EAAC,YADP;AAEE,sBAAA,WAAW,EAAC,aAFd;AAGE,sBAAA,IAAI,EAAC,QAHP;AAIE,sBAAA,QAAQ,EAAEzB,eAAe,CAAC0B,YAJ5B;AAKE,sBAAA,MAAM,EAAE1B,eAAe,CAAC2B,UAL1B;AAME,sBAAA,KAAK,EAAE3B,eAAe,CAACoB,MAAhB,CAAuBhB,UAAvB,IAAqC,EAN9C;AAOE,sBAAA,OAAO,EACLJ,eAAe,CAAC4B,OAAhB,CAAwBxB,UAAxB,IAAsCJ,eAAe,CAAC6B,MAAhB,CAAuBzB,UAA7D,GAA0E,IAA1E,GAAiF;AARrF;AAAA;AAAA;AAAA;AAAA,4BAFF,EAaGJ,eAAe,CAAC4B,OAAhB,CAAwBxB,UAAxB,IAAsCJ,eAAe,CAAC6B,MAAhB,CAAuBzB,UAA7D,gBACC,QAAC,YAAD;AAAc,sBAAA,IAAI,EAAC,SAAnB;AAAA,gCAA8BJ,eAAe,CAAC6B,MAAhB,CAAuBzB;AAArD;AAAA;AAAA;AAAA;AAAA,4BADD,GAEG,IAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,wBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwDD,CA/FD;;GAAML,S;UAEoBF,S;;;KAFpBE,S;AAiGN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Button,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Label,\r\n  Input,\r\n  Container,\r\n  FormFeedback,\r\n  Form,\r\n} from \"reactstrap\";\r\n// Formik validation\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\n\r\nconst EntryData = () => {\r\n\r\n  const rangeValidation = useFormik({\r\n    // enableReinitialize : use this flag when initial values needs to be changed\r\n    enableReinitialize: true,\r\n  \r\n    initialValues: {\r\n      min_Length: '',\r\n      max_Length: '',\r\n      min_Value: '',\r\n      max_Value: '',\r\n      range_Value: '',\r\n      regular_Exp: '',\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      min_Length: Yup.string()\r\n        .min(6, \"Must be exactly 6 digits\")\r\n        .required(\"Min 6 chars\"),\r\n      max_Length: Yup.string()\r\n        .max(6, \"Must be exactly 6 digits\")\r\n        .required(\"Max 6 chars\"),\r\n      min_Value: Yup.string().required(\"Min Value 6\").test('val', 'This value should be greater than or equal to 6', val => val >= 6),\r\n      max_Value: Yup.string().required(\"Max Value 6\").matches(/^[0-6]+$/, \"This value should be lower than or equal to 6.\"),\r\n      range_Value: Yup.string().required(\r\n        \"range between 5 to 10\"\r\n      ).min(5, \"This value should be between 5 and 10\")\r\n        .max(10, \"This value should be between 5 and 10\"),\r\n      regular_Exp: Yup.string()\r\n        .matches(\r\n          /^[#0-9]+$/,\r\n          \"Only Hex Value\"\r\n        )\r\n        .required(\"Only Hex Value\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(\"values\", values);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <MetaTags>\r\n          <title>\r\n            Form Validation | Skote - React Admin & Dashboard Template\r\n          </title>\r\n        </MetaTags>\r\n        <Container fluid={true}>\r\n          <Breadcrumbs title=\"Forms\" breadcrumbItem=\"Entry data marking & upload foto\" />\r\n          <Row>\r\n            <Col lg={6}>\r\n              <Card>\r\n                <CardBody>\r\n                  <CardTitle>Validation type</CardTitle>\r\n                  <CardSubtitle className=\"mb-3\">\r\n                    Parsley is a availity reactstrap validation. It helps you\r\n                    provide your users with feedback on their form submission\r\n                    before sending it to your server.\r\n                  </CardSubtitle>\r\n\r\n                  <Form\r\n                    onSubmit={(e) => {\r\n                      e.preventDefault();\r\n                      rangeValidation.handleSubmit();\r\n                      return false;\r\n                    }}>\r\n                    <div className=\"mb-3\">\r\n                      <Label>Kode User</Label>\r\n                      <Input\r\n                        name=\"max_Length\"\r\n                        placeholder=\"Max 3 chars\"\r\n                        type=\"number\"\r\n                        onChange={rangeValidation.handleChange}\r\n                        onBlur={rangeValidation.handleBlur}\r\n                        value={rangeValidation.values.max_Length || \"\"}\r\n                        invalid={\r\n                          rangeValidation.touched.max_Length && rangeValidation.errors.max_Length ? true : false\r\n                        }\r\n                      />\r\n                      {rangeValidation.touched.max_Length && rangeValidation.errors.max_Length ? (\r\n                        <FormFeedback type=\"invalid\">{rangeValidation.errors.max_Length}</FormFeedback>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n\r\n            \r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default EntryData;\r\n"]},"metadata":{},"sourceType":"module"}