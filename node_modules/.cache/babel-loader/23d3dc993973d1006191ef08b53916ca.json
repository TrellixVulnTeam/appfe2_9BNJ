{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"; // Crypto Redux States\n\nimport { GET_DATA, GET_DATA_IMAGE } from \"./actionTypes\";\nimport { getDataSuccess, getDataFail } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getData, getDataImage } from \"helpers/backend_helper\";\n\nfunction* fetchGetData() {\n  try {\n    console.log(\"CALL API\");\n    const response = yield call(getData);\n\n    if (response.status == 1) {\n      yield put(getDataSuccess(response));\n    } else {\n      yield put(getDataFail(\"Error Get Data\"));\n    }\n  } catch (error) {\n    yield put(getDataFail(error));\n  }\n}\n\nfunction* fetchGetDataImage(_ref) {\n  let {\n    payload: {\n      req\n    }\n  } = _ref;\n\n  try {\n    console.log(\"CALL API IMAGE\");\n    const response = yield call(getDataImage, {\n      file_name: req.file_name,\n      file_location: req.file_location\n    });\n    console.log(response);\n\n    if (response.size != 0) {\n      const url = window.URL.createObjectURL(new Blob([response]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', req.file_name);\n      document.body.appendChild(link);\n      console.log(link);\n      link.click();\n      link.parentNode.removeChild(link);\n      yield put(getDataSuccess(response));\n    } else {\n      yield put(getDataFail(\"Error Get Image Data\"));\n    }\n  } catch (error) {\n    yield put(getDataFail(error));\n  }\n}\n\nfunction* getDataSaga() {\n  yield takeEvery(GET_DATA, fetchGetData);\n  yield takeLatest(GET_DATA_IMAGE, fetchGetDataImage);\n}\n\nexport default getDataSaga;","map":{"version":3,"sources":["D:/React_Code/korindo_proj/appfe/src/store/donwloaddata/saga.js"],"names":["call","put","takeEvery","takeLatest","GET_DATA","GET_DATA_IMAGE","getDataSuccess","getDataFail","getData","getDataImage","fetchGetData","console","log","response","status","error","fetchGetDataImage","payload","req","file_name","file_location","size","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","getDataSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD,C,CAEA;;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,eAAzC;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C,C,CAEA;;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAqC,wBAArC;;AAEA,UAAUC,YAAV,GAAyB;AACvB,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACQ,OAAD,CAA3B;;AACA,QAAGK,QAAQ,CAACC,MAAT,IAAmB,CAAtB,EAAwB;AACtB,YAAMb,GAAG,CAACK,cAAc,CAACO,QAAD,CAAf,CAAT;AACD,KAFD,MAEK;AACH,YAAMZ,GAAG,CAACM,WAAW,CAAC,gBAAD,CAAZ,CAAT;AACD;AACF,GARD,CAQE,OAAOQ,KAAP,EAAc;AACd,UAAMd,GAAG,CAACM,WAAW,CAACQ,KAAD,CAAZ,CAAT;AACD;AACF;;AAED,UAAUC,iBAAV,OAAkD;AAAA,MAAtB;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAAX,GAAsB;;AAChD,MAAI;AACFP,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACS,YAAD,EAAe;AAACU,MAAAA,SAAS,EAAED,GAAG,CAACC,SAAhB;AAA2BC,MAAAA,aAAa,EAAEF,GAAG,CAACE;AAA9C,KAAf,CAA3B;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AACA,QAAGA,QAAQ,CAACQ,IAAT,IAAiB,CAApB,EAAsB;AAClB,YAAMC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,IAAIC,IAAJ,CAAS,CAACb,QAAD,CAAT,CAA3B,CAAZ;AACA,YAAMc,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;AACAF,MAAAA,IAAI,CAACG,IAAL,GAAYR,GAAZ;AACAK,MAAAA,IAAI,CAACI,YAAL,CAAkB,UAAlB,EAA8Bb,GAAG,CAACC,SAAlC;AACAS,MAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,IAA1B;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,IAAZ;AACAA,MAAAA,IAAI,CAACO,KAAL;AACAP,MAAAA,IAAI,CAACQ,UAAL,CAAgBC,WAAhB,CAA4BT,IAA5B;AACA,YAAM1B,GAAG,CAACK,cAAc,CAACO,QAAD,CAAf,CAAT;AACH,KAVD,MAUK;AACH,YAAMZ,GAAG,CAACM,WAAW,CAAC,sBAAD,CAAZ,CAAT;AACD;AACF,GAjBD,CAiBE,OAAOQ,KAAP,EAAc;AACd,UAAMd,GAAG,CAACM,WAAW,CAACQ,KAAD,CAAZ,CAAT;AACD;AACF;;AAGD,UAAUsB,WAAV,GAAwB;AAEtB,QAAMnC,SAAS,CAACE,QAAD,EAAWM,YAAX,CAAf;AACA,QAAMP,UAAU,CAACE,cAAD,EAAiBW,iBAAjB,CAAhB;AACD;;AAED,eAAeqB,WAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\"\r\n\r\n// Crypto Redux States\r\nimport { GET_DATA, GET_DATA_IMAGE } from \"./actionTypes\"\r\nimport { getDataSuccess, getDataFail } from \"./actions\"\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getData, getDataImage} from \"helpers/backend_helper\"\r\n\r\nfunction* fetchGetData() {\r\n  try {\r\n    console.log(\"CALL API\");\r\n    const response = yield call(getData)\r\n    if(response.status == 1){\r\n      yield put(getDataSuccess(response))\r\n    }else{\r\n      yield put(getDataFail(\"Error Get Data\"))\r\n    }\r\n  } catch (error) {\r\n    yield put(getDataFail(error))\r\n  }\r\n}\r\n\r\nfunction* fetchGetDataImage({ payload: { req } }) {\r\n  try {\r\n    console.log(\"CALL API IMAGE\");\r\n    const response = yield call(getDataImage, {file_name: req.file_name, file_location: req.file_location })\r\n    console.log(response);\r\n    if(response.size != 0){\r\n        const url = window.URL.createObjectURL(new Blob([response]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', req.file_name);\r\n        document.body.appendChild(link);\r\n        console.log(link);\r\n        link.click();\r\n        link.parentNode.removeChild(link);\r\n        yield put(getDataSuccess(response))\r\n    }else{\r\n      yield put(getDataFail(\"Error Get Image Data\"))\r\n    }\r\n  } catch (error) {\r\n    yield put(getDataFail(error))\r\n  }\r\n}\r\n\r\n\r\nfunction* getDataSaga() {\r\n    \r\n  yield takeEvery(GET_DATA, fetchGetData)\r\n  yield takeLatest(GET_DATA_IMAGE, fetchGetDataImage)\r\n}\r\n\r\nexport default getDataSaga\r\n"]},"metadata":{},"sourceType":"module"}