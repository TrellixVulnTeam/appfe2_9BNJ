{"ast":null,"code":"import { call, put, takeEvery, all, takeLatest, fork } from \"redux-saga/effects\"; // Crypto Redux States\n\nimport { GET_DATA, GET_DATA_IMAGE } from \"./actionTypes\";\nimport { getDataSuccess, getDataFail } from \"./actions\"; //Include Both Helper File with needed methods\n\nimport { getData, getDataImage } from \"helpers/backend_helper\";\n\nfunction* fetchGetData(_ref) {\n  let {\n    payload: req\n  } = _ref;\n\n  try {\n    console.log(\"CALL API : \" + JSON.stringify(req));\n    const response = yield call(getData(req));\n    console.log(response);\n\n    if (response.status == 1) {\n      yield put(getDataSuccess(response));\n    } else {\n      yield put(getDataFail(\"Error Get Data\"));\n    }\n  } catch (error) {\n    yield put(getDataFail(error));\n  }\n}\n\nfunction* fetchGetDataImage(_ref2) {\n  let {\n    payload: {\n      req\n    }\n  } = _ref2;\n\n  try {\n    console.log(\"CALL API IMAGE\");\n    const response = yield call(getDataImage, {\n      file_name: req.file_name,\n      file_location: req.file_location\n    });\n\n    if (response.size != 0) {\n      const url = window.URL.createObjectURL(new Blob([response]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', req.file_name);\n      document.body.appendChild(link);\n      console.log(link);\n      link.click();\n      link.parentNode.removeChild(link);\n      yield put(getDataFail(\"\"));\n    } else {\n      yield put(getDataFail(\"Error Get Image Data\"));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(getDataFail(\"Error Get Image Data\"));\n  }\n}\n\nfunction* getDataSaga() {\n  yield takeEvery(GET_DATA, fetchGetData);\n  yield takeLatest(GET_DATA_IMAGE, fetchGetDataImage);\n}\n\nfunction* downloadSaga() {\n  console.log('CALL SAGA RESET');\n  yield all([fork(getDataSaga)]);\n}\n\nexport default getDataSaga;","map":{"version":3,"sources":["D:/React_Code/korindo_proj/appfe/src/store/donwloaddata/saga.js"],"names":["call","put","takeEvery","all","takeLatest","fork","GET_DATA","GET_DATA_IMAGE","getDataSuccess","getDataFail","getData","getDataImage","fetchGetData","payload","req","console","log","JSON","stringify","response","status","error","fetchGetDataImage","file_name","file_location","size","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","getDataSaga","downloadSaga"],"mappings":"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","sourcesContent":["import { call, put, takeEvery, all, takeLatest, fork } from \"redux-saga/effects\"\r\n\r\n// Crypto Redux States\r\nimport { GET_DATA, GET_DATA_IMAGE } from \"./actionTypes\"\r\nimport { getDataSuccess, getDataFail } from \"./actions\"\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getData, getDataImage} from \"helpers/backend_helper\"\r\n\r\nfunction* fetchGetData({ payload: req }) {\r\n  try {\r\n    console.log(\"CALL API : \"+JSON.stringify(req));\r\n    const response = yield call(getData(req))\r\n    console.log(response);\r\n    if(response.status == 1){\r\n      yield put(getDataSuccess(response))\r\n    }else{\r\n      yield put(getDataFail(\"Error Get Data\"))\r\n    }\r\n  } catch (error) {\r\n    yield put(getDataFail(error))\r\n  }\r\n}\r\n\r\nfunction* fetchGetDataImage({ payload: { req } }) {\r\n  try {\r\n    console.log(\"CALL API IMAGE\");\r\n    const response = yield call(getDataImage, {file_name: req.file_name, file_location: req.file_location })\r\n    if(response.size != 0){\r\n        const url = window.URL.createObjectURL(new Blob([response]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', req.file_name);\r\n        document.body.appendChild(link);\r\n        console.log(link);\r\n        link.click();\r\n        link.parentNode.removeChild(link);\r\n        yield put(getDataFail(\"\"))\r\n    }else{\r\n      yield put(getDataFail(\"Error Get Image Data\"))\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(getDataFail(\"Error Get Image Data\"))\r\n  }\r\n}\r\n\r\n\r\nfunction* getDataSaga() {\r\n    \r\n  yield takeEvery(GET_DATA, fetchGetData)\r\n  yield takeLatest(GET_DATA_IMAGE, fetchGetDataImage)\r\n}\r\n\r\nfunction* downloadSaga() {\r\n  console.log('CALL SAGA RESET');\r\n  yield all([fork(getDataSaga)])\r\n}\r\n\r\nexport default getDataSaga\r\n"]},"metadata":{},"sourceType":"module"}